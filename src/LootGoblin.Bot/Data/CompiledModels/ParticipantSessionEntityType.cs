// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using LootGoblin.Bot.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#pragma warning disable 219, 612, 618
#nullable disable

namespace LootGoblin.Bot.Data.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class ParticipantSessionEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "LootGoblin.Bot.Data.Entities.ParticipantSession",
                typeof(ParticipantSession),
                baseEntityType,
                propertyCount: 7,
                navigationCount: 1,
                foreignKeyCount: 1,
                unnamedIndexCount: 1,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                propertyInfo: typeof(ParticipantSession).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ParticipantSession).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id.SetGetter(
                int (ParticipantSession entity) => ParticipantSessionUnsafeAccessors.Id(entity),
                bool (ParticipantSession entity) => ParticipantSessionUnsafeAccessors.Id(entity) == 0,
                int (ParticipantSession instance) => ParticipantSessionUnsafeAccessors.Id(instance),
                bool (ParticipantSession instance) => ParticipantSessionUnsafeAccessors.Id(instance) == 0);
            id.SetSetter(
                (ParticipantSession entity, int value) => ParticipantSessionUnsafeAccessors.Id(entity) = value);
            id.SetMaterializationSetter(
                (ParticipantSession entity, int value) => ParticipantSessionUnsafeAccessors.Id(entity) = value);
            id.SetAccessors(
                int (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(0) ? entry.ReadStoreGeneratedValue<int>(0) : (entry.FlaggedAsTemporary(0) && ParticipantSessionUnsafeAccessors.Id(((ParticipantSession)(entry.Entity))) == 0 ? entry.ReadTemporaryValue<int>(0) : ParticipantSessionUnsafeAccessors.Id(((ParticipantSession)(entry.Entity))))),
                int (InternalEntityEntry entry) => ParticipantSessionUnsafeAccessors.Id(((ParticipantSession)(entry.Entity))),
                int (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(id, 0),
                int (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<int>(id, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: 0);
            id.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                keyComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v));
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<int>(id));
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var channelId = runtimeEntityType.AddProperty(
                "ChannelId",
                typeof(ulong),
                propertyInfo: typeof(ParticipantSession).GetProperty("ChannelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ParticipantSession).GetField("<ChannelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            channelId.SetGetter(
                ulong (ParticipantSession entity) => ParticipantSessionUnsafeAccessors.ChannelId(entity),
                bool (ParticipantSession entity) => ParticipantSessionUnsafeAccessors.ChannelId(entity) == 0UL,
                ulong (ParticipantSession instance) => ParticipantSessionUnsafeAccessors.ChannelId(instance),
                bool (ParticipantSession instance) => ParticipantSessionUnsafeAccessors.ChannelId(instance) == 0UL);
            channelId.SetSetter(
                (ParticipantSession entity, ulong value) => ParticipantSessionUnsafeAccessors.ChannelId(entity) = value);
            channelId.SetMaterializationSetter(
                (ParticipantSession entity, ulong value) => ParticipantSessionUnsafeAccessors.ChannelId(entity) = value);
            channelId.SetAccessors(
                ulong (InternalEntityEntry entry) => ParticipantSessionUnsafeAccessors.ChannelId(((ParticipantSession)(entry.Entity))),
                ulong (InternalEntityEntry entry) => ParticipantSessionUnsafeAccessors.ChannelId(((ParticipantSession)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(channelId, 1),
                ulong (InternalEntityEntry entry) => entry.GetCurrentValue<ulong>(channelId),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            channelId.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            channelId.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<decimal>(
                    bool (decimal v1, decimal v2) => v1 == v2,
                    int (decimal v) => ((object)v).GetHashCode(),
                    decimal (decimal v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "decimal(20,0)",
                    precision: 20,
                    scale: 0),
                converter: new ValueConverter<ulong, decimal>(
                    decimal (ulong v) => ((decimal)(v)),
                    ulong (decimal v) => ((ulong)(v))),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ulong, decimal>(
                    JsonDecimalReaderWriter.Instance,
                    new ValueConverter<ulong, decimal>(
                        decimal (ulong v) => ((decimal)(v)),
                        ulong (decimal v) => ((ulong)(v)))));
            channelId.SetSentinelFromProviderValue(0m);
            channelId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var endedAt = runtimeEntityType.AddProperty(
                "EndedAt",
                typeof(DateTimeOffset?),
                propertyInfo: typeof(ParticipantSession).GetProperty("EndedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ParticipantSession).GetField("<EndedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            endedAt.SetGetter(
                DateTimeOffset? (ParticipantSession entity) => ParticipantSessionUnsafeAccessors.EndedAt(entity),
                bool (ParticipantSession entity) => !(ParticipantSessionUnsafeAccessors.EndedAt(entity).HasValue),
                DateTimeOffset? (ParticipantSession instance) => ParticipantSessionUnsafeAccessors.EndedAt(instance),
                bool (ParticipantSession instance) => !(ParticipantSessionUnsafeAccessors.EndedAt(instance).HasValue));
            endedAt.SetSetter(
                (ParticipantSession entity, DateTimeOffset? value) => ParticipantSessionUnsafeAccessors.EndedAt(entity) = value);
            endedAt.SetMaterializationSetter(
                (ParticipantSession entity, DateTimeOffset? value) => ParticipantSessionUnsafeAccessors.EndedAt(entity) = value);
            endedAt.SetAccessors(
                DateTimeOffset? (InternalEntityEntry entry) => ParticipantSessionUnsafeAccessors.EndedAt(((ParticipantSession)(entry.Entity))),
                DateTimeOffset? (InternalEntityEntry entry) => ParticipantSessionUnsafeAccessors.EndedAt(((ParticipantSession)(entry.Entity))),
                DateTimeOffset? (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTimeOffset?>(endedAt, 2),
                DateTimeOffset? (InternalEntityEntry entry) => entry.GetCurrentValue<DateTimeOffset?>(endedAt),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            endedAt.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            endedAt.TypeMapping = SqlServerDateTimeOffsetTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v),
                keyComparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v),
                providerValueComparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v));
            endedAt.SetComparer(new NullableValueComparer<DateTimeOffset>(endedAt.TypeMapping.Comparer));
            endedAt.SetKeyComparer(new NullableValueComparer<DateTimeOffset>(endedAt.TypeMapping.KeyComparer));
            endedAt.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var eventId = runtimeEntityType.AddProperty(
                "EventId",
                typeof(int),
                propertyInfo: typeof(ParticipantSession).GetProperty("EventId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ParticipantSession).GetField("<EventId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            eventId.SetGetter(
                int (ParticipantSession entity) => ParticipantSessionUnsafeAccessors.EventId(entity),
                bool (ParticipantSession entity) => ParticipantSessionUnsafeAccessors.EventId(entity) == 0,
                int (ParticipantSession instance) => ParticipantSessionUnsafeAccessors.EventId(instance),
                bool (ParticipantSession instance) => ParticipantSessionUnsafeAccessors.EventId(instance) == 0);
            eventId.SetSetter(
                (ParticipantSession entity, int value) => ParticipantSessionUnsafeAccessors.EventId(entity) = value);
            eventId.SetMaterializationSetter(
                (ParticipantSession entity, int value) => ParticipantSessionUnsafeAccessors.EventId(entity) = value);
            eventId.SetAccessors(
                int (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(3) ? entry.ReadStoreGeneratedValue<int>(1) : (entry.FlaggedAsTemporary(3) && ParticipantSessionUnsafeAccessors.EventId(((ParticipantSession)(entry.Entity))) == 0 ? entry.ReadTemporaryValue<int>(1) : ParticipantSessionUnsafeAccessors.EventId(((ParticipantSession)(entry.Entity))))),
                int (InternalEntityEntry entry) => ParticipantSessionUnsafeAccessors.EventId(((ParticipantSession)(entry.Entity))),
                int (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(eventId, 3),
                int (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<int>(eventId, 1),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            eventId.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: 1,
                storeGenerationIndex: 1);
            eventId.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                keyComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v));
            eventId.SetCurrentValueComparer(new EntryCurrentValueComparer<int>(eventId));
            eventId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var eventParticipantId = runtimeEntityType.AddProperty(
                "EventParticipantId",
                typeof(int?),
                propertyInfo: typeof(ParticipantSession).GetProperty("EventParticipantId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ParticipantSession).GetField("<EventParticipantId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            eventParticipantId.SetGetter(
                int? (ParticipantSession entity) => ParticipantSessionUnsafeAccessors.EventParticipantId(entity),
                bool (ParticipantSession entity) => !(ParticipantSessionUnsafeAccessors.EventParticipantId(entity).HasValue),
                int? (ParticipantSession instance) => ParticipantSessionUnsafeAccessors.EventParticipantId(instance),
                bool (ParticipantSession instance) => !(ParticipantSessionUnsafeAccessors.EventParticipantId(instance).HasValue));
            eventParticipantId.SetSetter(
                (ParticipantSession entity, int? value) => ParticipantSessionUnsafeAccessors.EventParticipantId(entity) = value);
            eventParticipantId.SetMaterializationSetter(
                (ParticipantSession entity, int? value) => ParticipantSessionUnsafeAccessors.EventParticipantId(entity) = value);
            eventParticipantId.SetAccessors(
                int? (InternalEntityEntry entry) => ParticipantSessionUnsafeAccessors.EventParticipantId(((ParticipantSession)(entry.Entity))),
                int? (InternalEntityEntry entry) => ParticipantSessionUnsafeAccessors.EventParticipantId(((ParticipantSession)(entry.Entity))),
                int? (InternalEntityEntry entry) => entry.ReadOriginalValue<int?>(eventParticipantId, 4),
                int? (InternalEntityEntry entry) => entry.GetCurrentValue<int?>(eventParticipantId),
                object (ValueBuffer valueBuffer) => valueBuffer[4]);
            eventParticipantId.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            eventParticipantId.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                keyComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v));
            eventParticipantId.SetComparer(new NullableValueComparer<int>(eventParticipantId.TypeMapping.Comparer));
            eventParticipantId.SetKeyComparer(new NullableValueComparer<int>(eventParticipantId.TypeMapping.KeyComparer));
            eventParticipantId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var startedAt = runtimeEntityType.AddProperty(
                "StartedAt",
                typeof(DateTimeOffset),
                propertyInfo: typeof(ParticipantSession).GetProperty("StartedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ParticipantSession).GetField("<StartedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)));
            startedAt.SetGetter(
                DateTimeOffset (ParticipantSession entity) => ParticipantSessionUnsafeAccessors.StartedAt(entity),
                bool (ParticipantSession entity) => ParticipantSessionUnsafeAccessors.StartedAt(entity).EqualsExact(default(DateTimeOffset)),
                DateTimeOffset (ParticipantSession instance) => ParticipantSessionUnsafeAccessors.StartedAt(instance),
                bool (ParticipantSession instance) => ParticipantSessionUnsafeAccessors.StartedAt(instance).EqualsExact(default(DateTimeOffset)));
            startedAt.SetSetter(
                (ParticipantSession entity, DateTimeOffset value) => ParticipantSessionUnsafeAccessors.StartedAt(entity) = value);
            startedAt.SetMaterializationSetter(
                (ParticipantSession entity, DateTimeOffset value) => ParticipantSessionUnsafeAccessors.StartedAt(entity) = value);
            startedAt.SetAccessors(
                DateTimeOffset (InternalEntityEntry entry) => ParticipantSessionUnsafeAccessors.StartedAt(((ParticipantSession)(entry.Entity))),
                DateTimeOffset (InternalEntityEntry entry) => ParticipantSessionUnsafeAccessors.StartedAt(((ParticipantSession)(entry.Entity))),
                DateTimeOffset (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTimeOffset>(startedAt, 5),
                DateTimeOffset (InternalEntityEntry entry) => entry.GetCurrentValue<DateTimeOffset>(startedAt),
                object (ValueBuffer valueBuffer) => valueBuffer[5]);
            startedAt.SetPropertyIndexes(
                index: 5,
                originalValueIndex: 5,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            startedAt.TypeMapping = SqlServerDateTimeOffsetTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v),
                keyComparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v),
                providerValueComparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v));
            startedAt.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var userId = runtimeEntityType.AddProperty(
                "UserId",
                typeof(ulong),
                propertyInfo: typeof(ParticipantSession).GetProperty("UserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ParticipantSession).GetField("<UserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            userId.SetGetter(
                ulong (ParticipantSession entity) => ParticipantSessionUnsafeAccessors.UserId(entity),
                bool (ParticipantSession entity) => ParticipantSessionUnsafeAccessors.UserId(entity) == 0UL,
                ulong (ParticipantSession instance) => ParticipantSessionUnsafeAccessors.UserId(instance),
                bool (ParticipantSession instance) => ParticipantSessionUnsafeAccessors.UserId(instance) == 0UL);
            userId.SetSetter(
                (ParticipantSession entity, ulong value) => ParticipantSessionUnsafeAccessors.UserId(entity) = value);
            userId.SetMaterializationSetter(
                (ParticipantSession entity, ulong value) => ParticipantSessionUnsafeAccessors.UserId(entity) = value);
            userId.SetAccessors(
                ulong (InternalEntityEntry entry) => ParticipantSessionUnsafeAccessors.UserId(((ParticipantSession)(entry.Entity))),
                ulong (InternalEntityEntry entry) => ParticipantSessionUnsafeAccessors.UserId(((ParticipantSession)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(userId, 6),
                ulong (InternalEntityEntry entry) => entry.GetCurrentValue<ulong>(userId),
                object (ValueBuffer valueBuffer) => valueBuffer[6]);
            userId.SetPropertyIndexes(
                index: 6,
                originalValueIndex: 6,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            userId.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<decimal>(
                    bool (decimal v1, decimal v2) => v1 == v2,
                    int (decimal v) => ((object)v).GetHashCode(),
                    decimal (decimal v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "decimal(20,0)",
                    precision: 20,
                    scale: 0),
                converter: new ValueConverter<ulong, decimal>(
                    decimal (ulong v) => ((decimal)(v)),
                    ulong (decimal v) => ((ulong)(v))),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ulong, decimal>(
                    JsonDecimalReaderWriter.Instance,
                    new ValueConverter<ulong, decimal>(
                        decimal (ulong v) => ((decimal)(v)),
                        ulong (decimal v) => ((ulong)(v)))));
            userId.SetSentinelFromProviderValue(0m);
            userId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { eventId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EventId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var @event = declaringEntityType.AddNavigation("Event",
                runtimeForeignKey,
                onDependent: true,
                typeof(GuildEvent),
                propertyInfo: typeof(ParticipantSession).GetProperty("Event", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ParticipantSession).GetField("<Event>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            @event.SetGetter(
                GuildEvent (ParticipantSession entity) => ParticipantSessionUnsafeAccessors.Event(entity),
                bool (ParticipantSession entity) => ParticipantSessionUnsafeAccessors.Event(entity) == null,
                GuildEvent (ParticipantSession instance) => ParticipantSessionUnsafeAccessors.Event(instance),
                bool (ParticipantSession instance) => ParticipantSessionUnsafeAccessors.Event(instance) == null);
            @event.SetSetter(
                (ParticipantSession entity, GuildEvent value) => ParticipantSessionUnsafeAccessors.Event(entity) = value);
            @event.SetMaterializationSetter(
                (ParticipantSession entity, GuildEvent value) => ParticipantSessionUnsafeAccessors.Event(entity) = value);
            @event.SetAccessors(
                GuildEvent (InternalEntityEntry entry) => ParticipantSessionUnsafeAccessors.Event(((ParticipantSession)(entry.Entity))),
                GuildEvent (InternalEntityEntry entry) => ParticipantSessionUnsafeAccessors.Event(((ParticipantSession)(entry.Entity))),
                null,
                GuildEvent (InternalEntityEntry entry) => entry.GetCurrentValue<GuildEvent>(@event),
                null);
            @event.SetPropertyIndexes(
                index: 0,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: 2,
                storeGenerationIndex: -1);
            var participantSessions = principalEntityType.AddNavigation("ParticipantSessions",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ParticipantSession>),
                propertyInfo: typeof(GuildEvent).GetProperty("ParticipantSessions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GuildEvent).GetField("<ParticipantSessions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            participantSessions.SetGetter(
                ICollection<ParticipantSession> (GuildEvent entity) => GuildEventUnsafeAccessors.ParticipantSessions(entity),
                bool (GuildEvent entity) => GuildEventUnsafeAccessors.ParticipantSessions(entity) == null,
                ICollection<ParticipantSession> (GuildEvent instance) => GuildEventUnsafeAccessors.ParticipantSessions(instance),
                bool (GuildEvent instance) => GuildEventUnsafeAccessors.ParticipantSessions(instance) == null);
            participantSessions.SetSetter(
                (GuildEvent entity, ICollection<ParticipantSession> value) => GuildEventUnsafeAccessors.ParticipantSessions(entity) = value);
            participantSessions.SetMaterializationSetter(
                (GuildEvent entity, ICollection<ParticipantSession> value) => GuildEventUnsafeAccessors.ParticipantSessions(entity) = value);
            participantSessions.SetAccessors(
                ICollection<ParticipantSession> (InternalEntityEntry entry) => GuildEventUnsafeAccessors.ParticipantSessions(((GuildEvent)(entry.Entity))),
                ICollection<ParticipantSession> (InternalEntityEntry entry) => GuildEventUnsafeAccessors.ParticipantSessions(((GuildEvent)(entry.Entity))),
                null,
                ICollection<ParticipantSession> (InternalEntityEntry entry) => entry.GetCurrentValue<ICollection<ParticipantSession>>(participantSessions),
                null);
            participantSessions.SetPropertyIndexes(
                index: 3,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: 4,
                storeGenerationIndex: -1);
            participantSessions.SetCollectionAccessor<GuildEvent, ICollection<ParticipantSession>, ParticipantSession>(
                ICollection<ParticipantSession> (GuildEvent entity) => GuildEventUnsafeAccessors.ParticipantSessions(entity),
                (GuildEvent entity, ICollection<ParticipantSession> collection) => GuildEventUnsafeAccessors.ParticipantSessions(entity) = ((ICollection<ParticipantSession>)(collection)),
                (GuildEvent entity, ICollection<ParticipantSession> collection) => GuildEventUnsafeAccessors.ParticipantSessions(entity) = ((ICollection<ParticipantSession>)(collection)),
                ICollection<ParticipantSession> (GuildEvent entity, Action<GuildEvent, ICollection<ParticipantSession>> setter) => ClrCollectionAccessorFactory.CreateAndSetHashSet<GuildEvent, ICollection<ParticipantSession>, ParticipantSession>(entity, setter),
                ICollection<ParticipantSession> () => ((ICollection<ParticipantSession>)(((ICollection<ParticipantSession>)(new HashSet<ParticipantSession>(ReferenceEqualityComparer.Instance))))));
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id");
            var channelId = runtimeEntityType.FindProperty("ChannelId");
            var endedAt = runtimeEntityType.FindProperty("EndedAt");
            var eventId = runtimeEntityType.FindProperty("EventId");
            var eventParticipantId = runtimeEntityType.FindProperty("EventParticipantId");
            var startedAt = runtimeEntityType.FindProperty("StartedAt");
            var userId = runtimeEntityType.FindProperty("UserId");
            var key = runtimeEntityType.FindKey(new[] { id });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNonNullableFactory<int>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<int>(key));
            var @event = runtimeEntityType.FindNavigation("Event");
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((ParticipantSession)(source.Entity));
                    return ((ISnapshot)(new Snapshot<int, ulong, DateTimeOffset?, int, int?, DateTimeOffset, ulong>(((ValueComparer<int>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<int>(id)), ((ValueComparer<ulong>)(((IProperty)channelId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(channelId)), (source.GetCurrentValue<DateTimeOffset?>(endedAt) == null ? null : ((ValueComparer<DateTimeOffset?>)(((IProperty)endedAt).GetValueComparer())).Snapshot(source.GetCurrentValue<DateTimeOffset?>(endedAt))), ((ValueComparer<int>)(((IProperty)eventId).GetValueComparer())).Snapshot(source.GetCurrentValue<int>(eventId)), (source.GetCurrentValue<int?>(eventParticipantId) == null ? null : ((ValueComparer<int?>)(((IProperty)eventParticipantId).GetValueComparer())).Snapshot(source.GetCurrentValue<int?>(eventParticipantId))), ((ValueComparer<DateTimeOffset>)(((IProperty)startedAt).GetValueComparer())).Snapshot(source.GetCurrentValue<DateTimeOffset>(startedAt)), ((ValueComparer<ulong>)(((IProperty)userId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(userId)))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<int, int>(((ValueComparer<int>)(((IProperty)id).GetValueComparer())).Snapshot(default(int)), ((ValueComparer<int>)(((IProperty)eventId).GetValueComparer())).Snapshot(default(int))))));
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<int, int>(default(int), default(int)))));
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((ParticipantSession)(source.Entity));
                    return ((ISnapshot)(new Snapshot<int, int, object>(((ValueComparer<int>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<int>(id)), ((ValueComparer<int>)(((IProperty)eventId).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<int>(eventId)), ParticipantSessionUnsafeAccessors.Event(entity))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 7,
                navigationCount: 1,
                complexPropertyCount: 0,
                originalValueCount: 7,
                shadowCount: 0,
                relationshipCount: 3,
                storeGeneratedCount: 2);
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "ParticipantSessions");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
