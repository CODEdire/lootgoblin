// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using LootGoblin.Bot.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#pragma warning disable 219, 612, 618
#nullable disable

namespace LootGoblin.Bot.Data.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class EventParticipantEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "LootGoblin.Bot.Data.Entities.EventParticipant",
                typeof(EventParticipant),
                baseEntityType,
                propertyCount: 5,
                navigationCount: 1,
                foreignKeyCount: 1,
                unnamedIndexCount: 1,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                propertyInfo: typeof(EventParticipant).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventParticipant).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id.SetGetter(
                int (EventParticipant entity) => EventParticipantUnsafeAccessors.Id(entity),
                bool (EventParticipant entity) => EventParticipantUnsafeAccessors.Id(entity) == 0,
                int (EventParticipant instance) => EventParticipantUnsafeAccessors.Id(instance),
                bool (EventParticipant instance) => EventParticipantUnsafeAccessors.Id(instance) == 0);
            id.SetSetter(
                (EventParticipant entity, int value) => EventParticipantUnsafeAccessors.Id(entity) = value);
            id.SetMaterializationSetter(
                (EventParticipant entity, int value) => EventParticipantUnsafeAccessors.Id(entity) = value);
            id.SetAccessors(
                int (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(0) ? entry.ReadStoreGeneratedValue<int>(0) : (entry.FlaggedAsTemporary(0) && EventParticipantUnsafeAccessors.Id(((EventParticipant)(entry.Entity))) == 0 ? entry.ReadTemporaryValue<int>(0) : EventParticipantUnsafeAccessors.Id(((EventParticipant)(entry.Entity))))),
                int (InternalEntityEntry entry) => EventParticipantUnsafeAccessors.Id(((EventParticipant)(entry.Entity))),
                int (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(id, 0),
                int (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<int>(id, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: 0);
            id.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                keyComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v));
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<int>(id));
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var eventId = runtimeEntityType.AddProperty(
                "EventId",
                typeof(int),
                propertyInfo: typeof(EventParticipant).GetProperty("EventId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventParticipant).GetField("<EventId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            eventId.SetGetter(
                int (EventParticipant entity) => EventParticipantUnsafeAccessors.EventId(entity),
                bool (EventParticipant entity) => EventParticipantUnsafeAccessors.EventId(entity) == 0,
                int (EventParticipant instance) => EventParticipantUnsafeAccessors.EventId(instance),
                bool (EventParticipant instance) => EventParticipantUnsafeAccessors.EventId(instance) == 0);
            eventId.SetSetter(
                (EventParticipant entity, int value) => EventParticipantUnsafeAccessors.EventId(entity) = value);
            eventId.SetMaterializationSetter(
                (EventParticipant entity, int value) => EventParticipantUnsafeAccessors.EventId(entity) = value);
            eventId.SetAccessors(
                int (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(1) ? entry.ReadStoreGeneratedValue<int>(1) : (entry.FlaggedAsTemporary(1) && EventParticipantUnsafeAccessors.EventId(((EventParticipant)(entry.Entity))) == 0 ? entry.ReadTemporaryValue<int>(1) : EventParticipantUnsafeAccessors.EventId(((EventParticipant)(entry.Entity))))),
                int (InternalEntityEntry entry) => EventParticipantUnsafeAccessors.EventId(((EventParticipant)(entry.Entity))),
                int (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(eventId, 1),
                int (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<int>(eventId, 1),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            eventId.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: 1,
                storeGenerationIndex: 1);
            eventId.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                keyComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v));
            eventId.SetCurrentValueComparer(new EntryCurrentValueComparer<int>(eventId));
            eventId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var excludedFromLoot = runtimeEntityType.AddProperty(
                "ExcludedFromLoot",
                typeof(bool),
                propertyInfo: typeof(EventParticipant).GetProperty("ExcludedFromLoot", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventParticipant).GetField("<ExcludedFromLoot>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            excludedFromLoot.SetGetter(
                bool (EventParticipant entity) => EventParticipantUnsafeAccessors.ExcludedFromLoot(entity),
                bool (EventParticipant entity) => EventParticipantUnsafeAccessors.ExcludedFromLoot(entity) == false,
                bool (EventParticipant instance) => EventParticipantUnsafeAccessors.ExcludedFromLoot(instance),
                bool (EventParticipant instance) => EventParticipantUnsafeAccessors.ExcludedFromLoot(instance) == false);
            excludedFromLoot.SetSetter(
                (EventParticipant entity, bool value) => EventParticipantUnsafeAccessors.ExcludedFromLoot(entity) = value);
            excludedFromLoot.SetMaterializationSetter(
                (EventParticipant entity, bool value) => EventParticipantUnsafeAccessors.ExcludedFromLoot(entity) = value);
            excludedFromLoot.SetAccessors(
                bool (InternalEntityEntry entry) => EventParticipantUnsafeAccessors.ExcludedFromLoot(((EventParticipant)(entry.Entity))),
                bool (InternalEntityEntry entry) => EventParticipantUnsafeAccessors.ExcludedFromLoot(((EventParticipant)(entry.Entity))),
                bool (InternalEntityEntry entry) => entry.ReadOriginalValue<bool>(excludedFromLoot, 2),
                bool (InternalEntityEntry entry) => entry.GetCurrentValue<bool>(excludedFromLoot),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            excludedFromLoot.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            excludedFromLoot.TypeMapping = SqlServerBoolTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v),
                providerValueComparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v));
            excludedFromLoot.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var totalParticipation = runtimeEntityType.AddProperty(
                "TotalParticipation",
                typeof(TimeSpan),
                propertyInfo: typeof(EventParticipant).GetProperty("TotalParticipation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventParticipant).GetField("<TotalParticipation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new TimeSpan(0, 0, 0, 0, 0));
            totalParticipation.SetGetter(
                TimeSpan (EventParticipant entity) => EventParticipantUnsafeAccessors.TotalParticipation(entity),
                bool (EventParticipant entity) => EventParticipantUnsafeAccessors.TotalParticipation(entity) == default(TimeSpan),
                TimeSpan (EventParticipant instance) => EventParticipantUnsafeAccessors.TotalParticipation(instance),
                bool (EventParticipant instance) => EventParticipantUnsafeAccessors.TotalParticipation(instance) == default(TimeSpan));
            totalParticipation.SetSetter(
                (EventParticipant entity, TimeSpan value) => EventParticipantUnsafeAccessors.TotalParticipation(entity) = value);
            totalParticipation.SetMaterializationSetter(
                (EventParticipant entity, TimeSpan value) => EventParticipantUnsafeAccessors.TotalParticipation(entity) = value);
            totalParticipation.SetAccessors(
                TimeSpan (InternalEntityEntry entry) => EventParticipantUnsafeAccessors.TotalParticipation(((EventParticipant)(entry.Entity))),
                TimeSpan (InternalEntityEntry entry) => EventParticipantUnsafeAccessors.TotalParticipation(((EventParticipant)(entry.Entity))),
                TimeSpan (InternalEntityEntry entry) => entry.ReadOriginalValue<TimeSpan>(totalParticipation, 3),
                TimeSpan (InternalEntityEntry entry) => entry.GetCurrentValue<TimeSpan>(totalParticipation),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            totalParticipation.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            totalParticipation.TypeMapping = SqlServerTimeSpanTypeMapping.Default.Clone(
                comparer: new ValueComparer<TimeSpan>(
                    bool (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                    int (TimeSpan v) => ((object)v).GetHashCode(),
                    TimeSpan (TimeSpan v) => v),
                keyComparer: new ValueComparer<TimeSpan>(
                    bool (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                    int (TimeSpan v) => ((object)v).GetHashCode(),
                    TimeSpan (TimeSpan v) => v),
                providerValueComparer: new ValueComparer<TimeSpan>(
                    bool (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                    int (TimeSpan v) => ((object)v).GetHashCode(),
                    TimeSpan (TimeSpan v) => v));
            totalParticipation.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var userId = runtimeEntityType.AddProperty(
                "UserId",
                typeof(ulong),
                propertyInfo: typeof(EventParticipant).GetProperty("UserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventParticipant).GetField("<UserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            userId.SetGetter(
                ulong (EventParticipant entity) => EventParticipantUnsafeAccessors.UserId(entity),
                bool (EventParticipant entity) => EventParticipantUnsafeAccessors.UserId(entity) == 0UL,
                ulong (EventParticipant instance) => EventParticipantUnsafeAccessors.UserId(instance),
                bool (EventParticipant instance) => EventParticipantUnsafeAccessors.UserId(instance) == 0UL);
            userId.SetSetter(
                (EventParticipant entity, ulong value) => EventParticipantUnsafeAccessors.UserId(entity) = value);
            userId.SetMaterializationSetter(
                (EventParticipant entity, ulong value) => EventParticipantUnsafeAccessors.UserId(entity) = value);
            userId.SetAccessors(
                ulong (InternalEntityEntry entry) => EventParticipantUnsafeAccessors.UserId(((EventParticipant)(entry.Entity))),
                ulong (InternalEntityEntry entry) => EventParticipantUnsafeAccessors.UserId(((EventParticipant)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(userId, 4),
                ulong (InternalEntityEntry entry) => entry.GetCurrentValue<ulong>(userId),
                object (ValueBuffer valueBuffer) => valueBuffer[4]);
            userId.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            userId.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<decimal>(
                    bool (decimal v1, decimal v2) => v1 == v2,
                    int (decimal v) => ((object)v).GetHashCode(),
                    decimal (decimal v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "decimal(20,0)",
                    precision: 20,
                    scale: 0),
                converter: new ValueConverter<ulong, decimal>(
                    decimal (ulong v) => ((decimal)(v)),
                    ulong (decimal v) => ((ulong)(v))),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ulong, decimal>(
                    JsonDecimalReaderWriter.Instance,
                    new ValueConverter<ulong, decimal>(
                        decimal (ulong v) => ((decimal)(v)),
                        ulong (decimal v) => ((ulong)(v)))));
            userId.SetSentinelFromProviderValue(0m);
            userId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { eventId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EventId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var @event = declaringEntityType.AddNavigation("Event",
                runtimeForeignKey,
                onDependent: true,
                typeof(GuildEvent),
                propertyInfo: typeof(EventParticipant).GetProperty("Event", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventParticipant).GetField("<Event>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            @event.SetGetter(
                GuildEvent (EventParticipant entity) => EventParticipantUnsafeAccessors.Event(entity),
                bool (EventParticipant entity) => EventParticipantUnsafeAccessors.Event(entity) == null,
                GuildEvent (EventParticipant instance) => EventParticipantUnsafeAccessors.Event(instance),
                bool (EventParticipant instance) => EventParticipantUnsafeAccessors.Event(instance) == null);
            @event.SetSetter(
                (EventParticipant entity, GuildEvent value) => EventParticipantUnsafeAccessors.Event(entity) = value);
            @event.SetMaterializationSetter(
                (EventParticipant entity, GuildEvent value) => EventParticipantUnsafeAccessors.Event(entity) = value);
            @event.SetAccessors(
                GuildEvent (InternalEntityEntry entry) => EventParticipantUnsafeAccessors.Event(((EventParticipant)(entry.Entity))),
                GuildEvent (InternalEntityEntry entry) => EventParticipantUnsafeAccessors.Event(((EventParticipant)(entry.Entity))),
                null,
                GuildEvent (InternalEntityEntry entry) => entry.GetCurrentValue<GuildEvent>(@event),
                null);
            @event.SetPropertyIndexes(
                index: 0,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: 2,
                storeGenerationIndex: -1);
            var eventParticipants = principalEntityType.AddNavigation("EventParticipants",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventParticipant>),
                propertyInfo: typeof(GuildEvent).GetProperty("EventParticipants", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GuildEvent).GetField("<EventParticipants>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            eventParticipants.SetGetter(
                ICollection<EventParticipant> (GuildEvent entity) => GuildEventUnsafeAccessors.EventParticipants(entity),
                bool (GuildEvent entity) => GuildEventUnsafeAccessors.EventParticipants(entity) == null,
                ICollection<EventParticipant> (GuildEvent instance) => GuildEventUnsafeAccessors.EventParticipants(instance),
                bool (GuildEvent instance) => GuildEventUnsafeAccessors.EventParticipants(instance) == null);
            eventParticipants.SetSetter(
                (GuildEvent entity, ICollection<EventParticipant> value) => GuildEventUnsafeAccessors.EventParticipants(entity) = value);
            eventParticipants.SetMaterializationSetter(
                (GuildEvent entity, ICollection<EventParticipant> value) => GuildEventUnsafeAccessors.EventParticipants(entity) = value);
            eventParticipants.SetAccessors(
                ICollection<EventParticipant> (InternalEntityEntry entry) => GuildEventUnsafeAccessors.EventParticipants(((GuildEvent)(entry.Entity))),
                ICollection<EventParticipant> (InternalEntityEntry entry) => GuildEventUnsafeAccessors.EventParticipants(((GuildEvent)(entry.Entity))),
                null,
                ICollection<EventParticipant> (InternalEntityEntry entry) => entry.GetCurrentValue<ICollection<EventParticipant>>(eventParticipants),
                null);
            eventParticipants.SetPropertyIndexes(
                index: 0,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: 1,
                storeGenerationIndex: -1);
            eventParticipants.SetCollectionAccessor<GuildEvent, ICollection<EventParticipant>, EventParticipant>(
                ICollection<EventParticipant> (GuildEvent entity) => GuildEventUnsafeAccessors.EventParticipants(entity),
                (GuildEvent entity, ICollection<EventParticipant> collection) => GuildEventUnsafeAccessors.EventParticipants(entity) = ((ICollection<EventParticipant>)(collection)),
                (GuildEvent entity, ICollection<EventParticipant> collection) => GuildEventUnsafeAccessors.EventParticipants(entity) = ((ICollection<EventParticipant>)(collection)),
                ICollection<EventParticipant> (GuildEvent entity, Action<GuildEvent, ICollection<EventParticipant>> setter) => ClrCollectionAccessorFactory.CreateAndSetHashSet<GuildEvent, ICollection<EventParticipant>, EventParticipant>(entity, setter),
                ICollection<EventParticipant> () => ((ICollection<EventParticipant>)(((ICollection<EventParticipant>)(new HashSet<EventParticipant>(ReferenceEqualityComparer.Instance))))));
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id");
            var eventId = runtimeEntityType.FindProperty("EventId");
            var excludedFromLoot = runtimeEntityType.FindProperty("ExcludedFromLoot");
            var totalParticipation = runtimeEntityType.FindProperty("TotalParticipation");
            var userId = runtimeEntityType.FindProperty("UserId");
            var key = runtimeEntityType.FindKey(new[] { id });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNonNullableFactory<int>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<int>(key));
            var @event = runtimeEntityType.FindNavigation("Event");
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((EventParticipant)(source.Entity));
                    return ((ISnapshot)(new Snapshot<int, int, bool, TimeSpan, ulong>(((ValueComparer<int>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<int>(id)), ((ValueComparer<int>)(((IProperty)eventId).GetValueComparer())).Snapshot(source.GetCurrentValue<int>(eventId)), ((ValueComparer<bool>)(((IProperty)excludedFromLoot).GetValueComparer())).Snapshot(source.GetCurrentValue<bool>(excludedFromLoot)), ((ValueComparer<TimeSpan>)(((IProperty)totalParticipation).GetValueComparer())).Snapshot(source.GetCurrentValue<TimeSpan>(totalParticipation)), ((ValueComparer<ulong>)(((IProperty)userId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(userId)))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<int, int>(((ValueComparer<int>)(((IProperty)id).GetValueComparer())).Snapshot(default(int)), ((ValueComparer<int>)(((IProperty)eventId).GetValueComparer())).Snapshot(default(int))))));
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<int, int>(default(int), default(int)))));
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((EventParticipant)(source.Entity));
                    return ((ISnapshot)(new Snapshot<int, int, object>(((ValueComparer<int>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<int>(id)), ((ValueComparer<int>)(((IProperty)eventId).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<int>(eventId)), EventParticipantUnsafeAccessors.Event(entity))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 5,
                navigationCount: 1,
                complexPropertyCount: 0,
                originalValueCount: 5,
                shadowCount: 0,
                relationshipCount: 3,
                storeGeneratedCount: 2);
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "EventParticipants");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
