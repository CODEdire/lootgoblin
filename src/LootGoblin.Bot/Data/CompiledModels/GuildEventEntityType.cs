// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using LootGoblin.Bot.Data.Entities;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#pragma warning disable 219, 612, 618
#nullable disable

namespace LootGoblin.Bot.Data.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class GuildEventEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "LootGoblin.Bot.Data.Entities.GuildEvent",
                typeof(GuildEvent),
                baseEntityType,
                propertyCount: 15,
                navigationCount: 4,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                propertyInfo: typeof(GuildEvent).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GuildEvent).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id.SetGetter(
                int (GuildEvent entity) => GuildEventUnsafeAccessors.Id(entity),
                bool (GuildEvent entity) => GuildEventUnsafeAccessors.Id(entity) == 0,
                int (GuildEvent instance) => GuildEventUnsafeAccessors.Id(instance),
                bool (GuildEvent instance) => GuildEventUnsafeAccessors.Id(instance) == 0);
            id.SetSetter(
                (GuildEvent entity, int value) => GuildEventUnsafeAccessors.Id(entity) = value);
            id.SetMaterializationSetter(
                (GuildEvent entity, int value) => GuildEventUnsafeAccessors.Id(entity) = value);
            id.SetAccessors(
                int (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(0) ? entry.ReadStoreGeneratedValue<int>(0) : (entry.FlaggedAsTemporary(0) && GuildEventUnsafeAccessors.Id(((GuildEvent)(entry.Entity))) == 0 ? entry.ReadTemporaryValue<int>(0) : GuildEventUnsafeAccessors.Id(((GuildEvent)(entry.Entity))))),
                int (InternalEntityEntry entry) => GuildEventUnsafeAccessors.Id(((GuildEvent)(entry.Entity))),
                int (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(id, 0),
                int (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<int>(id, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: 0);
            id.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                keyComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v));
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<int>(id));
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var completedAt = runtimeEntityType.AddProperty(
                "CompletedAt",
                typeof(DateTimeOffset?),
                propertyInfo: typeof(GuildEvent).GetProperty("CompletedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GuildEvent).GetField("<CompletedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            completedAt.SetGetter(
                DateTimeOffset? (GuildEvent entity) => GuildEventUnsafeAccessors.CompletedAt(entity),
                bool (GuildEvent entity) => !(GuildEventUnsafeAccessors.CompletedAt(entity).HasValue),
                DateTimeOffset? (GuildEvent instance) => GuildEventUnsafeAccessors.CompletedAt(instance),
                bool (GuildEvent instance) => !(GuildEventUnsafeAccessors.CompletedAt(instance).HasValue));
            completedAt.SetSetter(
                (GuildEvent entity, DateTimeOffset? value) => GuildEventUnsafeAccessors.CompletedAt(entity) = value);
            completedAt.SetMaterializationSetter(
                (GuildEvent entity, DateTimeOffset? value) => GuildEventUnsafeAccessors.CompletedAt(entity) = value);
            completedAt.SetAccessors(
                DateTimeOffset? (InternalEntityEntry entry) => GuildEventUnsafeAccessors.CompletedAt(((GuildEvent)(entry.Entity))),
                DateTimeOffset? (InternalEntityEntry entry) => GuildEventUnsafeAccessors.CompletedAt(((GuildEvent)(entry.Entity))),
                DateTimeOffset? (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTimeOffset?>(completedAt, 1),
                DateTimeOffset? (InternalEntityEntry entry) => entry.GetCurrentValue<DateTimeOffset?>(completedAt),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            completedAt.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            completedAt.TypeMapping = SqlServerDateTimeOffsetTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v),
                keyComparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v),
                providerValueComparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v));
            completedAt.SetComparer(new NullableValueComparer<DateTimeOffset>(completedAt.TypeMapping.Comparer));
            completedAt.SetKeyComparer(new NullableValueComparer<DateTimeOffset>(completedAt.TypeMapping.KeyComparer));
            completedAt.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var completedBy = runtimeEntityType.AddProperty(
                "CompletedBy",
                typeof(ulong?),
                propertyInfo: typeof(GuildEvent).GetProperty("CompletedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GuildEvent).GetField("<CompletedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            completedBy.SetGetter(
                ulong? (GuildEvent entity) => GuildEventUnsafeAccessors.CompletedBy(entity),
                bool (GuildEvent entity) => !(GuildEventUnsafeAccessors.CompletedBy(entity).HasValue),
                ulong? (GuildEvent instance) => GuildEventUnsafeAccessors.CompletedBy(instance),
                bool (GuildEvent instance) => !(GuildEventUnsafeAccessors.CompletedBy(instance).HasValue));
            completedBy.SetSetter(
                (GuildEvent entity, ulong? value) => GuildEventUnsafeAccessors.CompletedBy(entity) = value);
            completedBy.SetMaterializationSetter(
                (GuildEvent entity, ulong? value) => GuildEventUnsafeAccessors.CompletedBy(entity) = value);
            completedBy.SetAccessors(
                ulong? (InternalEntityEntry entry) => GuildEventUnsafeAccessors.CompletedBy(((GuildEvent)(entry.Entity))),
                ulong? (InternalEntityEntry entry) => GuildEventUnsafeAccessors.CompletedBy(((GuildEvent)(entry.Entity))),
                ulong? (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong?>(completedBy, 2),
                ulong? (InternalEntityEntry entry) => entry.GetCurrentValue<ulong?>(completedBy),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            completedBy.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            completedBy.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<decimal>(
                    bool (decimal v1, decimal v2) => v1 == v2,
                    int (decimal v) => ((object)v).GetHashCode(),
                    decimal (decimal v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "decimal(20,0)",
                    precision: 20,
                    scale: 0),
                converter: new ValueConverter<ulong, decimal>(
                    decimal (ulong v) => ((decimal)(v)),
                    ulong (decimal v) => ((ulong)(v))),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ulong, decimal>(
                    JsonDecimalReaderWriter.Instance,
                    new ValueConverter<ulong, decimal>(
                        decimal (ulong v) => ((decimal)(v)),
                        ulong (decimal v) => ((ulong)(v)))));
            completedBy.SetComparer(new NullableValueComparer<ulong>(completedBy.TypeMapping.Comparer));
            completedBy.SetKeyComparer(new NullableValueComparer<ulong>(completedBy.TypeMapping.KeyComparer));
            completedBy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var createdAt = runtimeEntityType.AddProperty(
                "CreatedAt",
                typeof(DateTimeOffset),
                propertyInfo: typeof(GuildEvent).GetProperty("CreatedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GuildEvent).GetField("<CreatedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)));
            createdAt.SetGetter(
                DateTimeOffset (GuildEvent entity) => GuildEventUnsafeAccessors.CreatedAt(entity),
                bool (GuildEvent entity) => GuildEventUnsafeAccessors.CreatedAt(entity).EqualsExact(default(DateTimeOffset)),
                DateTimeOffset (GuildEvent instance) => GuildEventUnsafeAccessors.CreatedAt(instance),
                bool (GuildEvent instance) => GuildEventUnsafeAccessors.CreatedAt(instance).EqualsExact(default(DateTimeOffset)));
            createdAt.SetSetter(
                (GuildEvent entity, DateTimeOffset value) => GuildEventUnsafeAccessors.CreatedAt(entity) = value);
            createdAt.SetMaterializationSetter(
                (GuildEvent entity, DateTimeOffset value) => GuildEventUnsafeAccessors.CreatedAt(entity) = value);
            createdAt.SetAccessors(
                DateTimeOffset (InternalEntityEntry entry) => GuildEventUnsafeAccessors.CreatedAt(((GuildEvent)(entry.Entity))),
                DateTimeOffset (InternalEntityEntry entry) => GuildEventUnsafeAccessors.CreatedAt(((GuildEvent)(entry.Entity))),
                DateTimeOffset (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTimeOffset>(createdAt, 3),
                DateTimeOffset (InternalEntityEntry entry) => entry.GetCurrentValue<DateTimeOffset>(createdAt),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            createdAt.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            createdAt.TypeMapping = SqlServerDateTimeOffsetTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v),
                keyComparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v),
                providerValueComparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v));
            createdAt.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var createdBy = runtimeEntityType.AddProperty(
                "CreatedBy",
                typeof(ulong),
                propertyInfo: typeof(GuildEvent).GetProperty("CreatedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GuildEvent).GetField("<CreatedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            createdBy.SetGetter(
                ulong (GuildEvent entity) => GuildEventUnsafeAccessors.CreatedBy(entity),
                bool (GuildEvent entity) => GuildEventUnsafeAccessors.CreatedBy(entity) == 0UL,
                ulong (GuildEvent instance) => GuildEventUnsafeAccessors.CreatedBy(instance),
                bool (GuildEvent instance) => GuildEventUnsafeAccessors.CreatedBy(instance) == 0UL);
            createdBy.SetSetter(
                (GuildEvent entity, ulong value) => GuildEventUnsafeAccessors.CreatedBy(entity) = value);
            createdBy.SetMaterializationSetter(
                (GuildEvent entity, ulong value) => GuildEventUnsafeAccessors.CreatedBy(entity) = value);
            createdBy.SetAccessors(
                ulong (InternalEntityEntry entry) => GuildEventUnsafeAccessors.CreatedBy(((GuildEvent)(entry.Entity))),
                ulong (InternalEntityEntry entry) => GuildEventUnsafeAccessors.CreatedBy(((GuildEvent)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(createdBy, 4),
                ulong (InternalEntityEntry entry) => entry.GetCurrentValue<ulong>(createdBy),
                object (ValueBuffer valueBuffer) => valueBuffer[4]);
            createdBy.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            createdBy.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<decimal>(
                    bool (decimal v1, decimal v2) => v1 == v2,
                    int (decimal v) => ((object)v).GetHashCode(),
                    decimal (decimal v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "decimal(20,0)",
                    precision: 20,
                    scale: 0),
                converter: new ValueConverter<ulong, decimal>(
                    decimal (ulong v) => ((decimal)(v)),
                    ulong (decimal v) => ((ulong)(v))),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ulong, decimal>(
                    JsonDecimalReaderWriter.Instance,
                    new ValueConverter<ulong, decimal>(
                        decimal (ulong v) => ((decimal)(v)),
                        ulong (decimal v) => ((ulong)(v)))));
            createdBy.SetSentinelFromProviderValue(0m);
            createdBy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var currentState = runtimeEntityType.AddProperty(
                "CurrentState",
                typeof(EventStatus),
                propertyInfo: typeof(GuildEvent).GetProperty("CurrentState", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GuildEvent).GetField("<CurrentState>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            currentState.SetGetter(
                EventStatus (GuildEvent entity) => GuildEventUnsafeAccessors.CurrentState(entity),
                bool (GuildEvent entity) => object.Equals(((object)(GuildEventUnsafeAccessors.CurrentState(entity))), ((object)(EventStatus.Created))),
                EventStatus (GuildEvent instance) => GuildEventUnsafeAccessors.CurrentState(instance),
                bool (GuildEvent instance) => object.Equals(((object)(GuildEventUnsafeAccessors.CurrentState(instance))), ((object)(EventStatus.Created))));
            currentState.SetSetter(
                (GuildEvent entity, EventStatus value) => GuildEventUnsafeAccessors.CurrentState(entity) = value);
            currentState.SetMaterializationSetter(
                (GuildEvent entity, EventStatus value) => GuildEventUnsafeAccessors.CurrentState(entity) = value);
            currentState.SetAccessors(
                EventStatus (InternalEntityEntry entry) => GuildEventUnsafeAccessors.CurrentState(((GuildEvent)(entry.Entity))),
                EventStatus (InternalEntityEntry entry) => GuildEventUnsafeAccessors.CurrentState(((GuildEvent)(entry.Entity))),
                EventStatus (InternalEntityEntry entry) => entry.ReadOriginalValue<EventStatus>(currentState, 5),
                EventStatus (InternalEntityEntry entry) => entry.GetCurrentValue<EventStatus>(currentState),
                object (ValueBuffer valueBuffer) => valueBuffer[5]);
            currentState.SetPropertyIndexes(
                index: 5,
                originalValueIndex: 5,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            currentState.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<EventStatus>(
                    bool (EventStatus v1, EventStatus v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (EventStatus v) => ((object)v).GetHashCode(),
                    EventStatus (EventStatus v) => v),
                keyComparer: new ValueComparer<EventStatus>(
                    bool (EventStatus v1, EventStatus v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (EventStatus v) => ((object)v).GetHashCode(),
                    EventStatus (EventStatus v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                converter: new ValueConverter<EventStatus, int>(
                    int (EventStatus value) => ((int)(value)),
                    EventStatus (int value) => ((EventStatus)(value))),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<EventStatus, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<EventStatus, int>(
                        int (EventStatus value) => ((int)(value)),
                        EventStatus (int value) => ((EventStatus)(value)))));
            currentState.SetSentinelFromProviderValue(0);
            currentState.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var description = runtimeEntityType.AddProperty(
                "Description",
                typeof(string),
                propertyInfo: typeof(GuildEvent).GetProperty("Description", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GuildEvent).GetField("<Description>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 2048);
            description.SetGetter(
                string (GuildEvent entity) => GuildEventUnsafeAccessors.Description(entity),
                bool (GuildEvent entity) => GuildEventUnsafeAccessors.Description(entity) == null,
                string (GuildEvent instance) => GuildEventUnsafeAccessors.Description(instance),
                bool (GuildEvent instance) => GuildEventUnsafeAccessors.Description(instance) == null);
            description.SetSetter(
                (GuildEvent entity, string value) => GuildEventUnsafeAccessors.Description(entity) = value);
            description.SetMaterializationSetter(
                (GuildEvent entity, string value) => GuildEventUnsafeAccessors.Description(entity) = value);
            description.SetAccessors(
                string (InternalEntityEntry entry) => GuildEventUnsafeAccessors.Description(((GuildEvent)(entry.Entity))),
                string (InternalEntityEntry entry) => GuildEventUnsafeAccessors.Description(((GuildEvent)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(description, 6),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(description),
                object (ValueBuffer valueBuffer) => valueBuffer[6]);
            description.SetPropertyIndexes(
                index: 6,
                originalValueIndex: 6,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            description.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(2048)",
                    size: 2048,
                    unicode: true,
                    dbType: System.Data.DbType.String));
            description.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var guildId = runtimeEntityType.AddProperty(
                "GuildId",
                typeof(ulong),
                propertyInfo: typeof(GuildEvent).GetProperty("GuildId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GuildEvent).GetField("<GuildId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            guildId.SetGetter(
                ulong (GuildEvent entity) => GuildEventUnsafeAccessors.GuildId(entity),
                bool (GuildEvent entity) => GuildEventUnsafeAccessors.GuildId(entity) == 0UL,
                ulong (GuildEvent instance) => GuildEventUnsafeAccessors.GuildId(instance),
                bool (GuildEvent instance) => GuildEventUnsafeAccessors.GuildId(instance) == 0UL);
            guildId.SetSetter(
                (GuildEvent entity, ulong value) => GuildEventUnsafeAccessors.GuildId(entity) = value);
            guildId.SetMaterializationSetter(
                (GuildEvent entity, ulong value) => GuildEventUnsafeAccessors.GuildId(entity) = value);
            guildId.SetAccessors(
                ulong (InternalEntityEntry entry) => GuildEventUnsafeAccessors.GuildId(((GuildEvent)(entry.Entity))),
                ulong (InternalEntityEntry entry) => GuildEventUnsafeAccessors.GuildId(((GuildEvent)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(guildId, 7),
                ulong (InternalEntityEntry entry) => entry.GetCurrentValue<ulong>(guildId),
                object (ValueBuffer valueBuffer) => valueBuffer[7]);
            guildId.SetPropertyIndexes(
                index: 7,
                originalValueIndex: 7,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            guildId.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<decimal>(
                    bool (decimal v1, decimal v2) => v1 == v2,
                    int (decimal v) => ((object)v).GetHashCode(),
                    decimal (decimal v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "decimal(20,0)",
                    precision: 20,
                    scale: 0),
                converter: new ValueConverter<ulong, decimal>(
                    decimal (ulong v) => ((decimal)(v)),
                    ulong (decimal v) => ((ulong)(v))),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ulong, decimal>(
                    JsonDecimalReaderWriter.Instance,
                    new ValueConverter<ulong, decimal>(
                        decimal (ulong v) => ((decimal)(v)),
                        ulong (decimal v) => ((ulong)(v)))));
            guildId.SetSentinelFromProviderValue(0m);
            guildId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var maximumParticipants = runtimeEntityType.AddProperty(
                "MaximumParticipants",
                typeof(int?),
                propertyInfo: typeof(GuildEvent).GetProperty("MaximumParticipants", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GuildEvent).GetField("<MaximumParticipants>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            maximumParticipants.SetGetter(
                int? (GuildEvent entity) => GuildEventUnsafeAccessors.MaximumParticipants(entity),
                bool (GuildEvent entity) => !(GuildEventUnsafeAccessors.MaximumParticipants(entity).HasValue),
                int? (GuildEvent instance) => GuildEventUnsafeAccessors.MaximumParticipants(instance),
                bool (GuildEvent instance) => !(GuildEventUnsafeAccessors.MaximumParticipants(instance).HasValue));
            maximumParticipants.SetSetter(
                (GuildEvent entity, int? value) => GuildEventUnsafeAccessors.MaximumParticipants(entity) = value);
            maximumParticipants.SetMaterializationSetter(
                (GuildEvent entity, int? value) => GuildEventUnsafeAccessors.MaximumParticipants(entity) = value);
            maximumParticipants.SetAccessors(
                int? (InternalEntityEntry entry) => GuildEventUnsafeAccessors.MaximumParticipants(((GuildEvent)(entry.Entity))),
                int? (InternalEntityEntry entry) => GuildEventUnsafeAccessors.MaximumParticipants(((GuildEvent)(entry.Entity))),
                int? (InternalEntityEntry entry) => entry.ReadOriginalValue<int?>(maximumParticipants, 8),
                int? (InternalEntityEntry entry) => entry.GetCurrentValue<int?>(maximumParticipants),
                object (ValueBuffer valueBuffer) => valueBuffer[8]);
            maximumParticipants.SetPropertyIndexes(
                index: 8,
                originalValueIndex: 8,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            maximumParticipants.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                keyComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v));
            maximumParticipants.SetComparer(new NullableValueComparer<int>(maximumParticipants.TypeMapping.Comparer));
            maximumParticipants.SetKeyComparer(new NullableValueComparer<int>(maximumParticipants.TypeMapping.KeyComparer));
            maximumParticipants.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var messageId = runtimeEntityType.AddProperty(
                "MessageId",
                typeof(ulong?),
                propertyInfo: typeof(GuildEvent).GetProperty("MessageId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GuildEvent).GetField("<MessageId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            messageId.SetGetter(
                ulong? (GuildEvent entity) => GuildEventUnsafeAccessors.MessageId(entity),
                bool (GuildEvent entity) => !(GuildEventUnsafeAccessors.MessageId(entity).HasValue),
                ulong? (GuildEvent instance) => GuildEventUnsafeAccessors.MessageId(instance),
                bool (GuildEvent instance) => !(GuildEventUnsafeAccessors.MessageId(instance).HasValue));
            messageId.SetSetter(
                (GuildEvent entity, ulong? value) => GuildEventUnsafeAccessors.MessageId(entity) = value);
            messageId.SetMaterializationSetter(
                (GuildEvent entity, ulong? value) => GuildEventUnsafeAccessors.MessageId(entity) = value);
            messageId.SetAccessors(
                ulong? (InternalEntityEntry entry) => GuildEventUnsafeAccessors.MessageId(((GuildEvent)(entry.Entity))),
                ulong? (InternalEntityEntry entry) => GuildEventUnsafeAccessors.MessageId(((GuildEvent)(entry.Entity))),
                ulong? (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong?>(messageId, 9),
                ulong? (InternalEntityEntry entry) => entry.GetCurrentValue<ulong?>(messageId),
                object (ValueBuffer valueBuffer) => valueBuffer[9]);
            messageId.SetPropertyIndexes(
                index: 9,
                originalValueIndex: 9,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            messageId.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<decimal>(
                    bool (decimal v1, decimal v2) => v1 == v2,
                    int (decimal v) => ((object)v).GetHashCode(),
                    decimal (decimal v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "decimal(20,0)",
                    precision: 20,
                    scale: 0),
                converter: new ValueConverter<ulong, decimal>(
                    decimal (ulong v) => ((decimal)(v)),
                    ulong (decimal v) => ((ulong)(v))),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ulong, decimal>(
                    JsonDecimalReaderWriter.Instance,
                    new ValueConverter<ulong, decimal>(
                        decimal (ulong v) => ((decimal)(v)),
                        ulong (decimal v) => ((ulong)(v)))));
            messageId.SetComparer(new NullableValueComparer<ulong>(messageId.TypeMapping.Comparer));
            messageId.SetKeyComparer(new NullableValueComparer<ulong>(messageId.TypeMapping.KeyComparer));
            messageId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var minimumParticipantMinutes = runtimeEntityType.AddProperty(
                "MinimumParticipantMinutes",
                typeof(int?),
                propertyInfo: typeof(GuildEvent).GetProperty("MinimumParticipantMinutes", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GuildEvent).GetField("<MinimumParticipantMinutes>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            minimumParticipantMinutes.SetGetter(
                int? (GuildEvent entity) => GuildEventUnsafeAccessors.MinimumParticipantMinutes(entity),
                bool (GuildEvent entity) => !(GuildEventUnsafeAccessors.MinimumParticipantMinutes(entity).HasValue),
                int? (GuildEvent instance) => GuildEventUnsafeAccessors.MinimumParticipantMinutes(instance),
                bool (GuildEvent instance) => !(GuildEventUnsafeAccessors.MinimumParticipantMinutes(instance).HasValue));
            minimumParticipantMinutes.SetSetter(
                (GuildEvent entity, int? value) => GuildEventUnsafeAccessors.MinimumParticipantMinutes(entity) = value);
            minimumParticipantMinutes.SetMaterializationSetter(
                (GuildEvent entity, int? value) => GuildEventUnsafeAccessors.MinimumParticipantMinutes(entity) = value);
            minimumParticipantMinutes.SetAccessors(
                int? (InternalEntityEntry entry) => GuildEventUnsafeAccessors.MinimumParticipantMinutes(((GuildEvent)(entry.Entity))),
                int? (InternalEntityEntry entry) => GuildEventUnsafeAccessors.MinimumParticipantMinutes(((GuildEvent)(entry.Entity))),
                int? (InternalEntityEntry entry) => entry.ReadOriginalValue<int?>(minimumParticipantMinutes, 10),
                int? (InternalEntityEntry entry) => entry.GetCurrentValue<int?>(minimumParticipantMinutes),
                object (ValueBuffer valueBuffer) => valueBuffer[10]);
            minimumParticipantMinutes.SetPropertyIndexes(
                index: 10,
                originalValueIndex: 10,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            minimumParticipantMinutes.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                keyComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v));
            minimumParticipantMinutes.SetComparer(new NullableValueComparer<int>(minimumParticipantMinutes.TypeMapping.Comparer));
            minimumParticipantMinutes.SetKeyComparer(new NullableValueComparer<int>(minimumParticipantMinutes.TypeMapping.KeyComparer));
            minimumParticipantMinutes.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var name = runtimeEntityType.AddProperty(
                "Name",
                typeof(string),
                propertyInfo: typeof(GuildEvent).GetProperty("Name", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GuildEvent).GetField("<Name>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 256);
            name.SetGetter(
                string (GuildEvent entity) => GuildEventUnsafeAccessors.Name(entity),
                bool (GuildEvent entity) => GuildEventUnsafeAccessors.Name(entity) == null,
                string (GuildEvent instance) => GuildEventUnsafeAccessors.Name(instance),
                bool (GuildEvent instance) => GuildEventUnsafeAccessors.Name(instance) == null);
            name.SetSetter(
                (GuildEvent entity, string value) => GuildEventUnsafeAccessors.Name(entity) = value);
            name.SetMaterializationSetter(
                (GuildEvent entity, string value) => GuildEventUnsafeAccessors.Name(entity) = value);
            name.SetAccessors(
                string (InternalEntityEntry entry) => GuildEventUnsafeAccessors.Name(((GuildEvent)(entry.Entity))),
                string (InternalEntityEntry entry) => GuildEventUnsafeAccessors.Name(((GuildEvent)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(name, 11),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(name),
                object (ValueBuffer valueBuffer) => valueBuffer[11]);
            name.SetPropertyIndexes(
                index: 11,
                originalValueIndex: 11,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            name.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(256)",
                    size: 256,
                    unicode: true,
                    dbType: System.Data.DbType.String));
            name.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var originChannelId = runtimeEntityType.AddProperty(
                "OriginChannelId",
                typeof(ulong?),
                propertyInfo: typeof(GuildEvent).GetProperty("OriginChannelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GuildEvent).GetField("<OriginChannelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            originChannelId.SetGetter(
                ulong? (GuildEvent entity) => GuildEventUnsafeAccessors.OriginChannelId(entity),
                bool (GuildEvent entity) => !(GuildEventUnsafeAccessors.OriginChannelId(entity).HasValue),
                ulong? (GuildEvent instance) => GuildEventUnsafeAccessors.OriginChannelId(instance),
                bool (GuildEvent instance) => !(GuildEventUnsafeAccessors.OriginChannelId(instance).HasValue));
            originChannelId.SetSetter(
                (GuildEvent entity, ulong? value) => GuildEventUnsafeAccessors.OriginChannelId(entity) = value);
            originChannelId.SetMaterializationSetter(
                (GuildEvent entity, ulong? value) => GuildEventUnsafeAccessors.OriginChannelId(entity) = value);
            originChannelId.SetAccessors(
                ulong? (InternalEntityEntry entry) => GuildEventUnsafeAccessors.OriginChannelId(((GuildEvent)(entry.Entity))),
                ulong? (InternalEntityEntry entry) => GuildEventUnsafeAccessors.OriginChannelId(((GuildEvent)(entry.Entity))),
                ulong? (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong?>(originChannelId, 12),
                ulong? (InternalEntityEntry entry) => entry.GetCurrentValue<ulong?>(originChannelId),
                object (ValueBuffer valueBuffer) => valueBuffer[12]);
            originChannelId.SetPropertyIndexes(
                index: 12,
                originalValueIndex: 12,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            originChannelId.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<decimal>(
                    bool (decimal v1, decimal v2) => v1 == v2,
                    int (decimal v) => ((object)v).GetHashCode(),
                    decimal (decimal v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "decimal(20,0)",
                    precision: 20,
                    scale: 0),
                converter: new ValueConverter<ulong, decimal>(
                    decimal (ulong v) => ((decimal)(v)),
                    ulong (decimal v) => ((ulong)(v))),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ulong, decimal>(
                    JsonDecimalReaderWriter.Instance,
                    new ValueConverter<ulong, decimal>(
                        decimal (ulong v) => ((decimal)(v)),
                        ulong (decimal v) => ((ulong)(v)))));
            originChannelId.SetComparer(new NullableValueComparer<ulong>(originChannelId.TypeMapping.Comparer));
            originChannelId.SetKeyComparer(new NullableValueComparer<ulong>(originChannelId.TypeMapping.KeyComparer));
            originChannelId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var startedAt = runtimeEntityType.AddProperty(
                "StartedAt",
                typeof(DateTimeOffset?),
                propertyInfo: typeof(GuildEvent).GetProperty("StartedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GuildEvent).GetField("<StartedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            startedAt.SetGetter(
                DateTimeOffset? (GuildEvent entity) => GuildEventUnsafeAccessors.StartedAt(entity),
                bool (GuildEvent entity) => !(GuildEventUnsafeAccessors.StartedAt(entity).HasValue),
                DateTimeOffset? (GuildEvent instance) => GuildEventUnsafeAccessors.StartedAt(instance),
                bool (GuildEvent instance) => !(GuildEventUnsafeAccessors.StartedAt(instance).HasValue));
            startedAt.SetSetter(
                (GuildEvent entity, DateTimeOffset? value) => GuildEventUnsafeAccessors.StartedAt(entity) = value);
            startedAt.SetMaterializationSetter(
                (GuildEvent entity, DateTimeOffset? value) => GuildEventUnsafeAccessors.StartedAt(entity) = value);
            startedAt.SetAccessors(
                DateTimeOffset? (InternalEntityEntry entry) => GuildEventUnsafeAccessors.StartedAt(((GuildEvent)(entry.Entity))),
                DateTimeOffset? (InternalEntityEntry entry) => GuildEventUnsafeAccessors.StartedAt(((GuildEvent)(entry.Entity))),
                DateTimeOffset? (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTimeOffset?>(startedAt, 13),
                DateTimeOffset? (InternalEntityEntry entry) => entry.GetCurrentValue<DateTimeOffset?>(startedAt),
                object (ValueBuffer valueBuffer) => valueBuffer[13]);
            startedAt.SetPropertyIndexes(
                index: 13,
                originalValueIndex: 13,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            startedAt.TypeMapping = SqlServerDateTimeOffsetTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v),
                keyComparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v),
                providerValueComparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v));
            startedAt.SetComparer(new NullableValueComparer<DateTimeOffset>(startedAt.TypeMapping.Comparer));
            startedAt.SetKeyComparer(new NullableValueComparer<DateTimeOffset>(startedAt.TypeMapping.KeyComparer));
            startedAt.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var startedBy = runtimeEntityType.AddProperty(
                "StartedBy",
                typeof(ulong?),
                propertyInfo: typeof(GuildEvent).GetProperty("StartedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GuildEvent).GetField("<StartedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            startedBy.SetGetter(
                ulong? (GuildEvent entity) => GuildEventUnsafeAccessors.StartedBy(entity),
                bool (GuildEvent entity) => !(GuildEventUnsafeAccessors.StartedBy(entity).HasValue),
                ulong? (GuildEvent instance) => GuildEventUnsafeAccessors.StartedBy(instance),
                bool (GuildEvent instance) => !(GuildEventUnsafeAccessors.StartedBy(instance).HasValue));
            startedBy.SetSetter(
                (GuildEvent entity, ulong? value) => GuildEventUnsafeAccessors.StartedBy(entity) = value);
            startedBy.SetMaterializationSetter(
                (GuildEvent entity, ulong? value) => GuildEventUnsafeAccessors.StartedBy(entity) = value);
            startedBy.SetAccessors(
                ulong? (InternalEntityEntry entry) => GuildEventUnsafeAccessors.StartedBy(((GuildEvent)(entry.Entity))),
                ulong? (InternalEntityEntry entry) => GuildEventUnsafeAccessors.StartedBy(((GuildEvent)(entry.Entity))),
                ulong? (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong?>(startedBy, 14),
                ulong? (InternalEntityEntry entry) => entry.GetCurrentValue<ulong?>(startedBy),
                object (ValueBuffer valueBuffer) => valueBuffer[14]);
            startedBy.SetPropertyIndexes(
                index: 14,
                originalValueIndex: 14,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            startedBy.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<decimal>(
                    bool (decimal v1, decimal v2) => v1 == v2,
                    int (decimal v) => ((object)v).GetHashCode(),
                    decimal (decimal v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "decimal(20,0)",
                    precision: 20,
                    scale: 0),
                converter: new ValueConverter<ulong, decimal>(
                    decimal (ulong v) => ((decimal)(v)),
                    ulong (decimal v) => ((ulong)(v))),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ulong, decimal>(
                    JsonDecimalReaderWriter.Instance,
                    new ValueConverter<ulong, decimal>(
                        decimal (ulong v) => ((decimal)(v)),
                        ulong (decimal v) => ((ulong)(v)))));
            startedBy.SetComparer(new NullableValueComparer<ulong>(startedBy.TypeMapping.Comparer));
            startedBy.SetKeyComparer(new NullableValueComparer<ulong>(startedBy.TypeMapping.KeyComparer));
            startedBy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id");
            var completedAt = runtimeEntityType.FindProperty("CompletedAt");
            var completedBy = runtimeEntityType.FindProperty("CompletedBy");
            var createdAt = runtimeEntityType.FindProperty("CreatedAt");
            var createdBy = runtimeEntityType.FindProperty("CreatedBy");
            var currentState = runtimeEntityType.FindProperty("CurrentState");
            var description = runtimeEntityType.FindProperty("Description");
            var guildId = runtimeEntityType.FindProperty("GuildId");
            var maximumParticipants = runtimeEntityType.FindProperty("MaximumParticipants");
            var messageId = runtimeEntityType.FindProperty("MessageId");
            var minimumParticipantMinutes = runtimeEntityType.FindProperty("MinimumParticipantMinutes");
            var name = runtimeEntityType.FindProperty("Name");
            var originChannelId = runtimeEntityType.FindProperty("OriginChannelId");
            var startedAt = runtimeEntityType.FindProperty("StartedAt");
            var startedBy = runtimeEntityType.FindProperty("StartedBy");
            var key = runtimeEntityType.FindKey(new[] { id });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNonNullableFactory<int>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<int>(key));
            var eventParticipants = runtimeEntityType.FindNavigation("EventParticipants");
            var lootPiles = runtimeEntityType.FindNavigation("LootPiles");
            var participantChannels = runtimeEntityType.FindNavigation("ParticipantChannels");
            var participantSessions = runtimeEntityType.FindNavigation("ParticipantSessions");
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((GuildEvent)(source.Entity));
                    return ((ISnapshot)(new Snapshot<int, DateTimeOffset?, ulong?, DateTimeOffset, ulong, EventStatus, string, ulong, int?, ulong?, int?, string, ulong?, DateTimeOffset?, ulong?>(((ValueComparer<int>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<int>(id)), (source.GetCurrentValue<DateTimeOffset?>(completedAt) == null ? null : ((ValueComparer<DateTimeOffset?>)(((IProperty)completedAt).GetValueComparer())).Snapshot(source.GetCurrentValue<DateTimeOffset?>(completedAt))), (source.GetCurrentValue<ulong?>(completedBy) == null ? null : ((ValueComparer<ulong?>)(((IProperty)completedBy).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong?>(completedBy))), ((ValueComparer<DateTimeOffset>)(((IProperty)createdAt).GetValueComparer())).Snapshot(source.GetCurrentValue<DateTimeOffset>(createdAt)), ((ValueComparer<ulong>)(((IProperty)createdBy).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(createdBy)), ((ValueComparer<EventStatus>)(((IProperty)currentState).GetValueComparer())).Snapshot(source.GetCurrentValue<EventStatus>(currentState)), (source.GetCurrentValue<string>(description) == null ? null : ((ValueComparer<string>)(((IProperty)description).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(description))), ((ValueComparer<ulong>)(((IProperty)guildId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(guildId)), (source.GetCurrentValue<int?>(maximumParticipants) == null ? null : ((ValueComparer<int?>)(((IProperty)maximumParticipants).GetValueComparer())).Snapshot(source.GetCurrentValue<int?>(maximumParticipants))), (source.GetCurrentValue<ulong?>(messageId) == null ? null : ((ValueComparer<ulong?>)(((IProperty)messageId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong?>(messageId))), (source.GetCurrentValue<int?>(minimumParticipantMinutes) == null ? null : ((ValueComparer<int?>)(((IProperty)minimumParticipantMinutes).GetValueComparer())).Snapshot(source.GetCurrentValue<int?>(minimumParticipantMinutes))), (source.GetCurrentValue<string>(name) == null ? null : ((ValueComparer<string>)(((IProperty)name).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(name))), (source.GetCurrentValue<ulong?>(originChannelId) == null ? null : ((ValueComparer<ulong?>)(((IProperty)originChannelId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong?>(originChannelId))), (source.GetCurrentValue<DateTimeOffset?>(startedAt) == null ? null : ((ValueComparer<DateTimeOffset?>)(((IProperty)startedAt).GetValueComparer())).Snapshot(source.GetCurrentValue<DateTimeOffset?>(startedAt))), (source.GetCurrentValue<ulong?>(startedBy) == null ? null : ((ValueComparer<ulong?>)(((IProperty)startedBy).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong?>(startedBy))))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<int>(((ValueComparer<int>)(((IProperty)id).GetValueComparer())).Snapshot(default(int))))));
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<int>(default(int)))));
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((GuildEvent)(source.Entity));
                    return ((ISnapshot)(new Snapshot<int, object, object, object, object>(((ValueComparer<int>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<int>(id)), SnapshotFactoryFactory.SnapshotCollection(GuildEventUnsafeAccessors.EventParticipants(entity)), SnapshotFactoryFactory.SnapshotCollection(GuildEventUnsafeAccessors.LootPiles(entity)), SnapshotFactoryFactory.SnapshotCollection(GuildEventUnsafeAccessors.ParticipantChannels(entity)), SnapshotFactoryFactory.SnapshotCollection(GuildEventUnsafeAccessors.ParticipantSessions(entity)))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 15,
                navigationCount: 4,
                complexPropertyCount: 0,
                originalValueCount: 15,
                shadowCount: 0,
                relationshipCount: 5,
                storeGeneratedCount: 1);
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "GuildEvents");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
