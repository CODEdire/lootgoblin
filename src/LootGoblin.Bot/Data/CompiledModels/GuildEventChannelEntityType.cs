// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using LootGoblin.Bot.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#pragma warning disable 219, 612, 618
#nullable disable

namespace LootGoblin.Bot.Data.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class GuildEventChannelEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "LootGoblin.Bot.Data.Entities.GuildEventChannel",
                typeof(GuildEventChannel),
                baseEntityType,
                propertyCount: 3,
                foreignKeyCount: 1,
                keyCount: 1);

            var guildEventId = runtimeEntityType.AddProperty(
                "GuildEventId",
                typeof(int),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            guildEventId.SetAccessors(
                int (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(0) ? entry.ReadStoreGeneratedValue<int>(0) : (entry.FlaggedAsTemporary(0) && entry.ReadShadowValue<int>(0) == 0 ? entry.ReadTemporaryValue<int>(0) : entry.ReadShadowValue<int>(0))),
                int (InternalEntityEntry entry) => entry.ReadShadowValue<int>(0),
                int (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(guildEventId, 0),
                int (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<int>(guildEventId, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            guildEventId.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: 0,
                relationshipIndex: 0,
                storeGenerationIndex: 0);
            guildEventId.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                keyComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v));
            guildEventId.SetCurrentValueComparer(new EntryCurrentValueComparer<int>(guildEventId));
            guildEventId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var __synthesizedOrdinal = runtimeEntityType.AddProperty(
                "__synthesizedOrdinal",
                typeof(int),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            __synthesizedOrdinal.SetAccessors(
                int (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(1) ? entry.ReadStoreGeneratedValue<int>(1) : (entry.FlaggedAsTemporary(1) && entry.ReadShadowValue<int>(1) == 0 ? entry.ReadTemporaryValue<int>(1) : entry.ReadShadowValue<int>(1))),
                int (InternalEntityEntry entry) => entry.ReadShadowValue<int>(1),
                int (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(__synthesizedOrdinal, 1),
                int (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<int>(__synthesizedOrdinal, 1),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            __synthesizedOrdinal.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: 1,
                relationshipIndex: 1,
                storeGenerationIndex: 1);
            __synthesizedOrdinal.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                keyComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v));
            __synthesizedOrdinal.SetCurrentValueComparer(new EntryCurrentValueComparer<int>(__synthesizedOrdinal));
            __synthesizedOrdinal.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var channelId = runtimeEntityType.AddProperty(
                "ChannelId",
                typeof(ulong),
                propertyInfo: typeof(GuildEventChannel).GetProperty("ChannelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GuildEventChannel).GetField("<ChannelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            channelId.SetGetter(
                ulong (GuildEventChannel entity) => GuildEventChannelUnsafeAccessors.ChannelId(entity),
                bool (GuildEventChannel entity) => GuildEventChannelUnsafeAccessors.ChannelId(entity) == 0UL,
                ulong (GuildEventChannel instance) => GuildEventChannelUnsafeAccessors.ChannelId(instance),
                bool (GuildEventChannel instance) => GuildEventChannelUnsafeAccessors.ChannelId(instance) == 0UL);
            channelId.SetSetter(
                (GuildEventChannel entity, ulong value) => GuildEventChannelUnsafeAccessors.ChannelId(entity) = value);
            channelId.SetMaterializationSetter(
                (GuildEventChannel entity, ulong value) => GuildEventChannelUnsafeAccessors.ChannelId(entity) = value);
            channelId.SetAccessors(
                ulong (InternalEntityEntry entry) => GuildEventChannelUnsafeAccessors.ChannelId(((GuildEventChannel)(entry.Entity))),
                ulong (InternalEntityEntry entry) => GuildEventChannelUnsafeAccessors.ChannelId(((GuildEventChannel)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(channelId, 2),
                ulong (InternalEntityEntry entry) => entry.GetCurrentValue<ulong>(channelId),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            channelId.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            channelId.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<decimal>(
                    bool (decimal v1, decimal v2) => v1 == v2,
                    int (decimal v) => ((object)v).GetHashCode(),
                    decimal (decimal v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "decimal(20,0)",
                    precision: 20,
                    scale: 0),
                converter: new ValueConverter<ulong, decimal>(
                    decimal (ulong v) => ((decimal)(v)),
                    ulong (decimal v) => ((ulong)(v))),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ulong, decimal>(
                    JsonDecimalReaderWriter.Instance,
                    new ValueConverter<ulong, decimal>(
                        decimal (ulong v) => ((decimal)(v)),
                        ulong (decimal v) => ((ulong)(v)))));
            channelId.SetSentinelFromProviderValue(0m);
            channelId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { guildEventId, __synthesizedOrdinal });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("GuildEventId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true,
                ownership: true);

            var participantChannels = principalEntityType.AddNavigation("ParticipantChannels",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<GuildEventChannel>),
                propertyInfo: typeof(GuildEvent).GetProperty("ParticipantChannels", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GuildEvent).GetField("<ParticipantChannels>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                eagerLoaded: true);

            participantChannels.SetGetter(
                ICollection<GuildEventChannel> (GuildEvent entity) => GuildEventUnsafeAccessors.ParticipantChannels(entity),
                bool (GuildEvent entity) => GuildEventUnsafeAccessors.ParticipantChannels(entity) == null,
                ICollection<GuildEventChannel> (GuildEvent instance) => GuildEventUnsafeAccessors.ParticipantChannels(instance),
                bool (GuildEvent instance) => GuildEventUnsafeAccessors.ParticipantChannels(instance) == null);
            participantChannels.SetSetter(
                (GuildEvent entity, ICollection<GuildEventChannel> value) => GuildEventUnsafeAccessors.ParticipantChannels(entity) = value);
            participantChannels.SetMaterializationSetter(
                (GuildEvent entity, ICollection<GuildEventChannel> value) => GuildEventUnsafeAccessors.ParticipantChannels(entity) = value);
            participantChannels.SetAccessors(
                ICollection<GuildEventChannel> (InternalEntityEntry entry) => GuildEventUnsafeAccessors.ParticipantChannels(((GuildEvent)(entry.Entity))),
                ICollection<GuildEventChannel> (InternalEntityEntry entry) => GuildEventUnsafeAccessors.ParticipantChannels(((GuildEvent)(entry.Entity))),
                null,
                ICollection<GuildEventChannel> (InternalEntityEntry entry) => entry.GetCurrentValue<ICollection<GuildEventChannel>>(participantChannels),
                null);
            participantChannels.SetPropertyIndexes(
                index: 2,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: 3,
                storeGenerationIndex: -1);
            participantChannels.SetCollectionAccessor<GuildEvent, ICollection<GuildEventChannel>, GuildEventChannel>(
                ICollection<GuildEventChannel> (GuildEvent entity) => GuildEventUnsafeAccessors.ParticipantChannels(entity),
                (GuildEvent entity, ICollection<GuildEventChannel> collection) => GuildEventUnsafeAccessors.ParticipantChannels(entity) = ((ICollection<GuildEventChannel>)(collection)),
                (GuildEvent entity, ICollection<GuildEventChannel> collection) => GuildEventUnsafeAccessors.ParticipantChannels(entity) = ((ICollection<GuildEventChannel>)(collection)),
                ICollection<GuildEventChannel> (GuildEvent entity, Action<GuildEvent, ICollection<GuildEventChannel>> setter) => ClrCollectionAccessorFactory.CreateAndSetHashSet<GuildEvent, ICollection<GuildEventChannel>, GuildEventChannel>(entity, setter),
                ICollection<GuildEventChannel> () => ((ICollection<GuildEventChannel>)(((ICollection<GuildEventChannel>)(new HashSet<GuildEventChannel>(ReferenceEqualityComparer.Instance))))));
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var guildEventId = runtimeEntityType.FindProperty("GuildEventId");
            var __synthesizedOrdinal = runtimeEntityType.FindProperty("__synthesizedOrdinal");
            var channelId = runtimeEntityType.FindProperty("ChannelId");
            var key = runtimeEntityType.FindKey(new[] { guildEventId, __synthesizedOrdinal });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateCompositeFactory(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<IReadOnlyList<object>>(key));
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((GuildEventChannel)(source.Entity));
                    return ((ISnapshot)(new Snapshot<int, int, ulong>(((ValueComparer<int>)(((IProperty)guildEventId).GetValueComparer())).Snapshot(source.GetCurrentValue<int>(guildEventId)), ((ValueComparer<int>)(((IProperty)__synthesizedOrdinal).GetValueComparer())).Snapshot(source.GetCurrentValue<int>(__synthesizedOrdinal)), ((ValueComparer<ulong>)(((IProperty)channelId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(channelId)))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<int, int>(((ValueComparer<int>)(((IProperty)guildEventId).GetValueComparer())).Snapshot(default(int)), ((ValueComparer<int>)(((IProperty)__synthesizedOrdinal).GetValueComparer())).Snapshot(default(int))))));
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<int, int>(default(int), default(int)))));
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => ((ISnapshot)(new Snapshot<int, int>((source.ContainsKey("GuildEventId") ? ((int)(source["GuildEventId"])) : 0), (source.ContainsKey("__synthesizedOrdinal") ? ((int)(source["__synthesizedOrdinal"])) : 0)))));
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<int, int>(default(int), default(int)))));
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((GuildEventChannel)(source.Entity));
                    return ((ISnapshot)(new Snapshot<int, int>(((ValueComparer<int>)(((IProperty)guildEventId).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<int>(guildEventId)), ((ValueComparer<int>)(((IProperty)__synthesizedOrdinal).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<int>(__synthesizedOrdinal)))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 3,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 3,
                shadowCount: 2,
                relationshipCount: 2,
                storeGeneratedCount: 2);
            runtimeEntityType.AddAnnotation("Relational:ContainerColumnName", "ParticipantChannels");
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "GuildEvents");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
