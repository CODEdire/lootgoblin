// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Update.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace LootGoblin.Bot.Data.CompiledModels
{
    public partial class EventDbContextModel
    {
        private EventDbContextModel()
            : base(skipDetectChanges: false, modelId: new Guid("8da986a8-52a3-44fe-b271-d9b274416f4b"), entityTypeCount: 6)
        {
        }

        partial void Initialize()
        {
            var eventParticipant = EventParticipantEntityType.Create(this);
            var guildEvent = GuildEventEntityType.Create(this);
            var guildEventChannel = GuildEventChannelEntityType.Create(this);
            var guildSettings = GuildSettingsEntityType.Create(this);
            var lootPile = LootPileEntityType.Create(this);
            var participantSession = ParticipantSessionEntityType.Create(this);

            EventParticipantEntityType.CreateForeignKey1(eventParticipant, guildEvent);
            GuildEventChannelEntityType.CreateForeignKey1(guildEventChannel, guildEvent);
            LootPileEntityType.CreateForeignKey1(lootPile, guildEvent);
            ParticipantSessionEntityType.CreateForeignKey1(participantSession, guildEvent);

            EventParticipantEntityType.CreateAnnotations(eventParticipant);
            GuildEventEntityType.CreateAnnotations(guildEvent);
            GuildEventChannelEntityType.CreateAnnotations(guildEventChannel);
            GuildSettingsEntityType.CreateAnnotations(guildSettings);
            LootPileEntityType.CreateAnnotations(lootPile);
            ParticipantSessionEntityType.CreateAnnotations(participantSession);

            AddAnnotation("ProductVersion", "9.0.7");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModelFactory", () => CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var eventParticipant = FindEntityType("LootGoblin.Bot.Data.Entities.EventParticipant")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            eventParticipant.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var lootGoblinBotDataEntitiesEventParticipantTableBase = new TableBase("LootGoblin.Bot.Data.Entities.EventParticipant", null, relationalModel);
            var eventIdColumnBase = new ColumnBase<ColumnMappingBase>("EventId", "int", lootGoblinBotDataEntitiesEventParticipantTableBase);
            lootGoblinBotDataEntitiesEventParticipantTableBase.Columns.Add("EventId", eventIdColumnBase);
            var excludedFromLootColumnBase = new ColumnBase<ColumnMappingBase>("ExcludedFromLoot", "bit", lootGoblinBotDataEntitiesEventParticipantTableBase);
            lootGoblinBotDataEntitiesEventParticipantTableBase.Columns.Add("ExcludedFromLoot", excludedFromLootColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "int", lootGoblinBotDataEntitiesEventParticipantTableBase);
            lootGoblinBotDataEntitiesEventParticipantTableBase.Columns.Add("Id", idColumnBase);
            var totalParticipationColumnBase = new ColumnBase<ColumnMappingBase>("TotalParticipation", "time", lootGoblinBotDataEntitiesEventParticipantTableBase);
            lootGoblinBotDataEntitiesEventParticipantTableBase.Columns.Add("TotalParticipation", totalParticipationColumnBase);
            var userIdColumnBase = new ColumnBase<ColumnMappingBase>("UserId", "decimal(20,0)", lootGoblinBotDataEntitiesEventParticipantTableBase);
            lootGoblinBotDataEntitiesEventParticipantTableBase.Columns.Add("UserId", userIdColumnBase);
            relationalModel.DefaultTables.Add("LootGoblin.Bot.Data.Entities.EventParticipant", lootGoblinBotDataEntitiesEventParticipantTableBase);
            var lootGoblinBotDataEntitiesEventParticipantMappingBase = new TableMappingBase<ColumnMappingBase>(eventParticipant, lootGoblinBotDataEntitiesEventParticipantTableBase, null);
            lootGoblinBotDataEntitiesEventParticipantTableBase.AddTypeMapping(lootGoblinBotDataEntitiesEventParticipantMappingBase, false);
            defaultTableMappings.Add(lootGoblinBotDataEntitiesEventParticipantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, eventParticipant.FindProperty("Id")!, lootGoblinBotDataEntitiesEventParticipantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)eventIdColumnBase, eventParticipant.FindProperty("EventId")!, lootGoblinBotDataEntitiesEventParticipantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)excludedFromLootColumnBase, eventParticipant.FindProperty("ExcludedFromLoot")!, lootGoblinBotDataEntitiesEventParticipantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)totalParticipationColumnBase, eventParticipant.FindProperty("TotalParticipation")!, lootGoblinBotDataEntitiesEventParticipantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase, eventParticipant.FindProperty("UserId")!, lootGoblinBotDataEntitiesEventParticipantMappingBase);

            var tableMappings = new List<TableMapping>();
            eventParticipant.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var eventParticipantsTable = new Table("EventParticipants", null, relationalModel);
            var idColumn = new Column("Id", "int", eventParticipantsTable);
            eventParticipantsTable.Columns.Add("Id", idColumn);
            idColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<int>(idColumn);
            var eventIdColumn = new Column("EventId", "int", eventParticipantsTable);
            eventParticipantsTable.Columns.Add("EventId", eventIdColumn);
            eventIdColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<int>(eventIdColumn);
            var excludedFromLootColumn = new Column("ExcludedFromLoot", "bit", eventParticipantsTable);
            eventParticipantsTable.Columns.Add("ExcludedFromLoot", excludedFromLootColumn);
            excludedFromLootColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<bool>(excludedFromLootColumn);
            var totalParticipationColumn = new Column("TotalParticipation", "time", eventParticipantsTable);
            eventParticipantsTable.Columns.Add("TotalParticipation", totalParticipationColumn);
            totalParticipationColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<TimeSpan>(totalParticipationColumn);
            var userIdColumn = new Column("UserId", "decimal(20,0)", eventParticipantsTable);
            eventParticipantsTable.Columns.Add("UserId", userIdColumn);
            userIdColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<decimal>(userIdColumn);
            relationalModel.Tables.Add(("EventParticipants", null), eventParticipantsTable);
            var eventParticipantsTableMapping = new TableMapping(eventParticipant, eventParticipantsTable, null);
            eventParticipantsTable.AddTypeMapping(eventParticipantsTableMapping, false);
            tableMappings.Add(eventParticipantsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, eventParticipant.FindProperty("Id")!, eventParticipantsTableMapping);
            RelationalModel.CreateColumnMapping(eventIdColumn, eventParticipant.FindProperty("EventId")!, eventParticipantsTableMapping);
            RelationalModel.CreateColumnMapping(excludedFromLootColumn, eventParticipant.FindProperty("ExcludedFromLoot")!, eventParticipantsTableMapping);
            RelationalModel.CreateColumnMapping(totalParticipationColumn, eventParticipant.FindProperty("TotalParticipation")!, eventParticipantsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn, eventParticipant.FindProperty("UserId")!, eventParticipantsTableMapping);
            var pK_EventParticipants = new UniqueConstraint("PK_EventParticipants", eventParticipantsTable, new[] { idColumn });
            eventParticipantsTable.PrimaryKey = pK_EventParticipants;
            pK_EventParticipants.SetRowKeyValueFactory(new SimpleRowKeyValueFactory<int>(pK_EventParticipants));
            var pK_EventParticipantsKey = RelationalModel.GetKey(this,
                "LootGoblin.Bot.Data.Entities.EventParticipant",
                new[] { "Id" });
            pK_EventParticipants.MappedKeys.Add(pK_EventParticipantsKey);
            RelationalModel.GetOrCreateUniqueConstraints(pK_EventParticipantsKey).Add(pK_EventParticipants);
            eventParticipantsTable.UniqueConstraints.Add("PK_EventParticipants", pK_EventParticipants);
            var iX_EventParticipants_EventId = new TableIndex(
            "IX_EventParticipants_EventId", eventParticipantsTable, new[] { eventIdColumn }, false);
            iX_EventParticipants_EventId.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<int>(iX_EventParticipants_EventId));
            var iX_EventParticipants_EventIdIx = RelationalModel.GetIndex(this,
                "LootGoblin.Bot.Data.Entities.EventParticipant",
                new[] { "EventId" });
            iX_EventParticipants_EventId.MappedIndexes.Add(iX_EventParticipants_EventIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_EventParticipants_EventIdIx).Add(iX_EventParticipants_EventId);
            eventParticipantsTable.Indexes.Add("IX_EventParticipants_EventId", iX_EventParticipants_EventId);

            var guildEvent = FindEntityType("LootGoblin.Bot.Data.Entities.GuildEvent")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            guildEvent.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var lootGoblinBotDataEntitiesGuildEventTableBase = new TableBase("LootGoblin.Bot.Data.Entities.GuildEvent", null, relationalModel);
            var completedAtColumnBase = new ColumnBase<ColumnMappingBase>("CompletedAt", "datetimeoffset", lootGoblinBotDataEntitiesGuildEventTableBase)
            {
                IsNullable = true
            };
            lootGoblinBotDataEntitiesGuildEventTableBase.Columns.Add("CompletedAt", completedAtColumnBase);
            var completedByColumnBase = new ColumnBase<ColumnMappingBase>("CompletedBy", "decimal(20,0)", lootGoblinBotDataEntitiesGuildEventTableBase)
            {
                IsNullable = true
            };
            lootGoblinBotDataEntitiesGuildEventTableBase.Columns.Add("CompletedBy", completedByColumnBase);
            var createdAtColumnBase = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetimeoffset", lootGoblinBotDataEntitiesGuildEventTableBase);
            lootGoblinBotDataEntitiesGuildEventTableBase.Columns.Add("CreatedAt", createdAtColumnBase);
            var createdByColumnBase = new ColumnBase<ColumnMappingBase>("CreatedBy", "decimal(20,0)", lootGoblinBotDataEntitiesGuildEventTableBase);
            lootGoblinBotDataEntitiesGuildEventTableBase.Columns.Add("CreatedBy", createdByColumnBase);
            var currentStateColumnBase = new ColumnBase<ColumnMappingBase>("CurrentState", "int", lootGoblinBotDataEntitiesGuildEventTableBase);
            lootGoblinBotDataEntitiesGuildEventTableBase.Columns.Add("CurrentState", currentStateColumnBase);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(2048)", lootGoblinBotDataEntitiesGuildEventTableBase)
            {
                IsNullable = true
            };
            lootGoblinBotDataEntitiesGuildEventTableBase.Columns.Add("Description", descriptionColumnBase);
            var guildIdColumnBase = new ColumnBase<ColumnMappingBase>("GuildId", "decimal(20,0)", lootGoblinBotDataEntitiesGuildEventTableBase);
            lootGoblinBotDataEntitiesGuildEventTableBase.Columns.Add("GuildId", guildIdColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "int", lootGoblinBotDataEntitiesGuildEventTableBase);
            lootGoblinBotDataEntitiesGuildEventTableBase.Columns.Add("Id", idColumnBase0);
            var maximumParticipantsColumnBase = new ColumnBase<ColumnMappingBase>("MaximumParticipants", "int", lootGoblinBotDataEntitiesGuildEventTableBase)
            {
                IsNullable = true
            };
            lootGoblinBotDataEntitiesGuildEventTableBase.Columns.Add("MaximumParticipants", maximumParticipantsColumnBase);
            var messageIdColumnBase = new ColumnBase<ColumnMappingBase>("MessageId", "decimal(20,0)", lootGoblinBotDataEntitiesGuildEventTableBase)
            {
                IsNullable = true
            };
            lootGoblinBotDataEntitiesGuildEventTableBase.Columns.Add("MessageId", messageIdColumnBase);
            var minimumParticipantMinutesColumnBase = new ColumnBase<ColumnMappingBase>("MinimumParticipantMinutes", "int", lootGoblinBotDataEntitiesGuildEventTableBase)
            {
                IsNullable = true
            };
            lootGoblinBotDataEntitiesGuildEventTableBase.Columns.Add("MinimumParticipantMinutes", minimumParticipantMinutesColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(256)", lootGoblinBotDataEntitiesGuildEventTableBase);
            lootGoblinBotDataEntitiesGuildEventTableBase.Columns.Add("Name", nameColumnBase);
            var originChannelIdColumnBase = new ColumnBase<ColumnMappingBase>("OriginChannelId", "decimal(20,0)", lootGoblinBotDataEntitiesGuildEventTableBase)
            {
                IsNullable = true
            };
            lootGoblinBotDataEntitiesGuildEventTableBase.Columns.Add("OriginChannelId", originChannelIdColumnBase);
            var startedAtColumnBase = new ColumnBase<ColumnMappingBase>("StartedAt", "datetimeoffset", lootGoblinBotDataEntitiesGuildEventTableBase)
            {
                IsNullable = true
            };
            lootGoblinBotDataEntitiesGuildEventTableBase.Columns.Add("StartedAt", startedAtColumnBase);
            var startedByColumnBase = new ColumnBase<ColumnMappingBase>("StartedBy", "decimal(20,0)", lootGoblinBotDataEntitiesGuildEventTableBase)
            {
                IsNullable = true
            };
            lootGoblinBotDataEntitiesGuildEventTableBase.Columns.Add("StartedBy", startedByColumnBase);
            relationalModel.DefaultTables.Add("LootGoblin.Bot.Data.Entities.GuildEvent", lootGoblinBotDataEntitiesGuildEventTableBase);
            var lootGoblinBotDataEntitiesGuildEventMappingBase = new TableMappingBase<ColumnMappingBase>(guildEvent, lootGoblinBotDataEntitiesGuildEventTableBase, null);
            lootGoblinBotDataEntitiesGuildEventTableBase.AddTypeMapping(lootGoblinBotDataEntitiesGuildEventMappingBase, false);
            defaultTableMappings0.Add(lootGoblinBotDataEntitiesGuildEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, guildEvent.FindProperty("Id")!, lootGoblinBotDataEntitiesGuildEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)completedAtColumnBase, guildEvent.FindProperty("CompletedAt")!, lootGoblinBotDataEntitiesGuildEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)completedByColumnBase, guildEvent.FindProperty("CompletedBy")!, lootGoblinBotDataEntitiesGuildEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase, guildEvent.FindProperty("CreatedAt")!, lootGoblinBotDataEntitiesGuildEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase, guildEvent.FindProperty("CreatedBy")!, lootGoblinBotDataEntitiesGuildEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)currentStateColumnBase, guildEvent.FindProperty("CurrentState")!, lootGoblinBotDataEntitiesGuildEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, guildEvent.FindProperty("Description")!, lootGoblinBotDataEntitiesGuildEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)guildIdColumnBase, guildEvent.FindProperty("GuildId")!, lootGoblinBotDataEntitiesGuildEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)maximumParticipantsColumnBase, guildEvent.FindProperty("MaximumParticipants")!, lootGoblinBotDataEntitiesGuildEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)messageIdColumnBase, guildEvent.FindProperty("MessageId")!, lootGoblinBotDataEntitiesGuildEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)minimumParticipantMinutesColumnBase, guildEvent.FindProperty("MinimumParticipantMinutes")!, lootGoblinBotDataEntitiesGuildEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, guildEvent.FindProperty("Name")!, lootGoblinBotDataEntitiesGuildEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)originChannelIdColumnBase, guildEvent.FindProperty("OriginChannelId")!, lootGoblinBotDataEntitiesGuildEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)startedAtColumnBase, guildEvent.FindProperty("StartedAt")!, lootGoblinBotDataEntitiesGuildEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)startedByColumnBase, guildEvent.FindProperty("StartedBy")!, lootGoblinBotDataEntitiesGuildEventMappingBase);

            var tableMappings0 = new List<TableMapping>();
            guildEvent.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var guildEventsTable = new Table("GuildEvents", null, relationalModel);
            var idColumn0 = new Column("Id", "int", guildEventsTable);
            guildEventsTable.Columns.Add("Id", idColumn0);
            idColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<int>(idColumn0);
            var completedAtColumn = new Column("CompletedAt", "datetimeoffset", guildEventsTable)
            {
                IsNullable = true
            };
            guildEventsTable.Columns.Add("CompletedAt", completedAtColumn);
            completedAtColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<DateTimeOffset>(completedAtColumn);
            var completedByColumn = new Column("CompletedBy", "decimal(20,0)", guildEventsTable)
            {
                IsNullable = true
            };
            guildEventsTable.Columns.Add("CompletedBy", completedByColumn);
            completedByColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<decimal>(completedByColumn);
            var createdAtColumn = new Column("CreatedAt", "datetimeoffset", guildEventsTable);
            guildEventsTable.Columns.Add("CreatedAt", createdAtColumn);
            createdAtColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<DateTimeOffset>(createdAtColumn);
            var createdByColumn = new Column("CreatedBy", "decimal(20,0)", guildEventsTable);
            guildEventsTable.Columns.Add("CreatedBy", createdByColumn);
            createdByColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<decimal>(createdByColumn);
            var currentStateColumn = new Column("CurrentState", "int", guildEventsTable);
            guildEventsTable.Columns.Add("CurrentState", currentStateColumn);
            currentStateColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<int>(currentStateColumn);
            var descriptionColumn = new Column("Description", "nvarchar(2048)", guildEventsTable)
            {
                IsNullable = true
            };
            guildEventsTable.Columns.Add("Description", descriptionColumn);
            descriptionColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(descriptionColumn);
            var guildIdColumn = new Column("GuildId", "decimal(20,0)", guildEventsTable);
            guildEventsTable.Columns.Add("GuildId", guildIdColumn);
            guildIdColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<decimal>(guildIdColumn);
            var maximumParticipantsColumn = new Column("MaximumParticipants", "int", guildEventsTable)
            {
                IsNullable = true
            };
            guildEventsTable.Columns.Add("MaximumParticipants", maximumParticipantsColumn);
            maximumParticipantsColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<int>(maximumParticipantsColumn);
            var messageIdColumn = new Column("MessageId", "decimal(20,0)", guildEventsTable)
            {
                IsNullable = true
            };
            guildEventsTable.Columns.Add("MessageId", messageIdColumn);
            messageIdColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<decimal>(messageIdColumn);
            var minimumParticipantMinutesColumn = new Column("MinimumParticipantMinutes", "int", guildEventsTable)
            {
                IsNullable = true
            };
            guildEventsTable.Columns.Add("MinimumParticipantMinutes", minimumParticipantMinutesColumn);
            minimumParticipantMinutesColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<int>(minimumParticipantMinutesColumn);
            var nameColumn = new Column("Name", "nvarchar(256)", guildEventsTable);
            guildEventsTable.Columns.Add("Name", nameColumn);
            nameColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(nameColumn);
            var originChannelIdColumn = new Column("OriginChannelId", "decimal(20,0)", guildEventsTable)
            {
                IsNullable = true
            };
            guildEventsTable.Columns.Add("OriginChannelId", originChannelIdColumn);
            originChannelIdColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<decimal>(originChannelIdColumn);
            var participantChannelsColumn = new JsonColumn("ParticipantChannels", "nvarchar(max)", guildEventsTable)
            {
                IsNullable = true
            };
            guildEventsTable.Columns.Add("ParticipantChannels", participantChannelsColumn);
            participantChannelsColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<JsonElement>(participantChannelsColumn);
            var startedAtColumn = new Column("StartedAt", "datetimeoffset", guildEventsTable)
            {
                IsNullable = true
            };
            guildEventsTable.Columns.Add("StartedAt", startedAtColumn);
            startedAtColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<DateTimeOffset>(startedAtColumn);
            var startedByColumn = new Column("StartedBy", "decimal(20,0)", guildEventsTable)
            {
                IsNullable = true
            };
            guildEventsTable.Columns.Add("StartedBy", startedByColumn);
            startedByColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<decimal>(startedByColumn);
            relationalModel.Tables.Add(("GuildEvents", null), guildEventsTable);
            var guildEventsTableMapping = new TableMapping(guildEvent, guildEventsTable, null)
            {
                IsSharedTablePrincipal = true,
            };
            guildEventsTable.AddTypeMapping(guildEventsTableMapping, false);
            tableMappings0.Add(guildEventsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, guildEvent.FindProperty("Id")!, guildEventsTableMapping);
            RelationalModel.CreateColumnMapping(completedAtColumn, guildEvent.FindProperty("CompletedAt")!, guildEventsTableMapping);
            RelationalModel.CreateColumnMapping(completedByColumn, guildEvent.FindProperty("CompletedBy")!, guildEventsTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn, guildEvent.FindProperty("CreatedAt")!, guildEventsTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn, guildEvent.FindProperty("CreatedBy")!, guildEventsTableMapping);
            RelationalModel.CreateColumnMapping(currentStateColumn, guildEvent.FindProperty("CurrentState")!, guildEventsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, guildEvent.FindProperty("Description")!, guildEventsTableMapping);
            RelationalModel.CreateColumnMapping(guildIdColumn, guildEvent.FindProperty("GuildId")!, guildEventsTableMapping);
            RelationalModel.CreateColumnMapping(maximumParticipantsColumn, guildEvent.FindProperty("MaximumParticipants")!, guildEventsTableMapping);
            RelationalModel.CreateColumnMapping(messageIdColumn, guildEvent.FindProperty("MessageId")!, guildEventsTableMapping);
            RelationalModel.CreateColumnMapping(minimumParticipantMinutesColumn, guildEvent.FindProperty("MinimumParticipantMinutes")!, guildEventsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, guildEvent.FindProperty("Name")!, guildEventsTableMapping);
            RelationalModel.CreateColumnMapping(originChannelIdColumn, guildEvent.FindProperty("OriginChannelId")!, guildEventsTableMapping);
            RelationalModel.CreateColumnMapping(startedAtColumn, guildEvent.FindProperty("StartedAt")!, guildEventsTableMapping);
            RelationalModel.CreateColumnMapping(startedByColumn, guildEvent.FindProperty("StartedBy")!, guildEventsTableMapping);

            var guildEventChannel = FindEntityType("LootGoblin.Bot.Data.Entities.GuildEventChannel")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            guildEventChannel.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var lootGoblinBotDataEntitiesGuildEventChannelTableBase = new TableBase("LootGoblin.Bot.Data.Entities.GuildEventChannel", null, relationalModel);
            var participantChannelsColumnBase = new JsonColumnBase("ParticipantChannels", "nvarchar(max)", lootGoblinBotDataEntitiesGuildEventChannelTableBase)
            {
                IsNullable = true
            };
            lootGoblinBotDataEntitiesGuildEventChannelTableBase.Columns.Add("ParticipantChannels", participantChannelsColumnBase);
            relationalModel.DefaultTables.Add("LootGoblin.Bot.Data.Entities.GuildEventChannel", lootGoblinBotDataEntitiesGuildEventChannelTableBase);
            var lootGoblinBotDataEntitiesGuildEventChannelMappingBase = new TableMappingBase<ColumnMappingBase>(guildEventChannel, lootGoblinBotDataEntitiesGuildEventChannelTableBase, null);
            lootGoblinBotDataEntitiesGuildEventChannelTableBase.AddTypeMapping(lootGoblinBotDataEntitiesGuildEventChannelMappingBase, false);
            defaultTableMappings1.Add(lootGoblinBotDataEntitiesGuildEventChannelMappingBase);

            var tableMappings1 = new List<TableMapping>();
            guildEventChannel.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var guildEventsTableMapping0 = new TableMapping(guildEventChannel, guildEventsTable, null)
            {
                IsSharedTablePrincipal = false,
            };
            guildEventsTable.AddTypeMapping(guildEventsTableMapping0, true);
            tableMappings1.Add(guildEventsTableMapping0);
            guildEventsTable.AddRowInternalForeignKey(guildEventChannel, RelationalModel.GetForeignKey(this,
                "LootGoblin.Bot.Data.Entities.GuildEventChannel",
                new[] { "GuildEventId" },
                "LootGoblin.Bot.Data.Entities.GuildEvent",
                new[] { "Id" }));
            var pK_GuildEvents = new UniqueConstraint("PK_GuildEvents", guildEventsTable, new[] { idColumn0 });
            guildEventsTable.PrimaryKey = pK_GuildEvents;
            pK_GuildEvents.SetRowKeyValueFactory(new SimpleRowKeyValueFactory<int>(pK_GuildEvents));
            var pK_GuildEventsKey = RelationalModel.GetKey(this,
                "LootGoblin.Bot.Data.Entities.GuildEvent",
                new[] { "Id" });
            pK_GuildEvents.MappedKeys.Add(pK_GuildEventsKey);
            RelationalModel.GetOrCreateUniqueConstraints(pK_GuildEventsKey).Add(pK_GuildEvents);
            guildEventsTable.UniqueConstraints.Add("PK_GuildEvents", pK_GuildEvents);

            var guildSettings = FindEntityType("LootGoblin.Bot.Data.Entities.GuildSettings")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            guildSettings.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var lootGoblinBotDataEntitiesGuildSettingsTableBase = new TableBase("LootGoblin.Bot.Data.Entities.GuildSettings", null, relationalModel);
            var eventChannelIdColumnBase = new ColumnBase<ColumnMappingBase>("EventChannelId", "decimal(20,0)", lootGoblinBotDataEntitiesGuildSettingsTableBase)
            {
                IsNullable = true
            };
            lootGoblinBotDataEntitiesGuildSettingsTableBase.Columns.Add("EventChannelId", eventChannelIdColumnBase);
            var eventOrganizerRoleIdColumnBase = new ColumnBase<ColumnMappingBase>("EventOrganizerRoleId", "decimal(20,0)", lootGoblinBotDataEntitiesGuildSettingsTableBase)
            {
                IsNullable = true
            };
            lootGoblinBotDataEntitiesGuildSettingsTableBase.Columns.Add("EventOrganizerRoleId", eventOrganizerRoleIdColumnBase);
            var eventParticipantRoleIdColumnBase = new ColumnBase<ColumnMappingBase>("EventParticipantRoleId", "decimal(20,0)", lootGoblinBotDataEntitiesGuildSettingsTableBase)
            {
                IsNullable = true
            };
            lootGoblinBotDataEntitiesGuildSettingsTableBase.Columns.Add("EventParticipantRoleId", eventParticipantRoleIdColumnBase);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "decimal(20,0)", lootGoblinBotDataEntitiesGuildSettingsTableBase);
            lootGoblinBotDataEntitiesGuildSettingsTableBase.Columns.Add("Id", idColumnBase1);
            var lootChannelIdColumnBase = new ColumnBase<ColumnMappingBase>("LootChannelId", "decimal(20,0)", lootGoblinBotDataEntitiesGuildSettingsTableBase)
            {
                IsNullable = true
            };
            lootGoblinBotDataEntitiesGuildSettingsTableBase.Columns.Add("LootChannelId", lootChannelIdColumnBase);
            relationalModel.DefaultTables.Add("LootGoblin.Bot.Data.Entities.GuildSettings", lootGoblinBotDataEntitiesGuildSettingsTableBase);
            var lootGoblinBotDataEntitiesGuildSettingsMappingBase = new TableMappingBase<ColumnMappingBase>(guildSettings, lootGoblinBotDataEntitiesGuildSettingsTableBase, null);
            lootGoblinBotDataEntitiesGuildSettingsTableBase.AddTypeMapping(lootGoblinBotDataEntitiesGuildSettingsMappingBase, false);
            defaultTableMappings2.Add(lootGoblinBotDataEntitiesGuildSettingsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, guildSettings.FindProperty("Id")!, lootGoblinBotDataEntitiesGuildSettingsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)eventChannelIdColumnBase, guildSettings.FindProperty("EventChannelId")!, lootGoblinBotDataEntitiesGuildSettingsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)eventOrganizerRoleIdColumnBase, guildSettings.FindProperty("EventOrganizerRoleId")!, lootGoblinBotDataEntitiesGuildSettingsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)eventParticipantRoleIdColumnBase, guildSettings.FindProperty("EventParticipantRoleId")!, lootGoblinBotDataEntitiesGuildSettingsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lootChannelIdColumnBase, guildSettings.FindProperty("LootChannelId")!, lootGoblinBotDataEntitiesGuildSettingsMappingBase);

            var tableMappings2 = new List<TableMapping>();
            guildSettings.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var guildSettingsTable = new Table("GuildSettings", null, relationalModel);
            var idColumn1 = new Column("Id", "decimal(20,0)", guildSettingsTable);
            guildSettingsTable.Columns.Add("Id", idColumn1);
            idColumn1.Accessors = ColumnAccessorsFactory.CreateGeneric<decimal>(idColumn1);
            var eventChannelIdColumn = new Column("EventChannelId", "decimal(20,0)", guildSettingsTable)
            {
                IsNullable = true
            };
            guildSettingsTable.Columns.Add("EventChannelId", eventChannelIdColumn);
            eventChannelIdColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<decimal>(eventChannelIdColumn);
            var eventOrganizerRoleIdColumn = new Column("EventOrganizerRoleId", "decimal(20,0)", guildSettingsTable)
            {
                IsNullable = true
            };
            guildSettingsTable.Columns.Add("EventOrganizerRoleId", eventOrganizerRoleIdColumn);
            eventOrganizerRoleIdColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<decimal>(eventOrganizerRoleIdColumn);
            var eventParticipantRoleIdColumn = new Column("EventParticipantRoleId", "decimal(20,0)", guildSettingsTable)
            {
                IsNullable = true
            };
            guildSettingsTable.Columns.Add("EventParticipantRoleId", eventParticipantRoleIdColumn);
            eventParticipantRoleIdColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<decimal>(eventParticipantRoleIdColumn);
            var lootChannelIdColumn = new Column("LootChannelId", "decimal(20,0)", guildSettingsTable)
            {
                IsNullable = true
            };
            guildSettingsTable.Columns.Add("LootChannelId", lootChannelIdColumn);
            lootChannelIdColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<decimal>(lootChannelIdColumn);
            relationalModel.Tables.Add(("GuildSettings", null), guildSettingsTable);
            var guildSettingsTableMapping = new TableMapping(guildSettings, guildSettingsTable, null);
            guildSettingsTable.AddTypeMapping(guildSettingsTableMapping, false);
            tableMappings2.Add(guildSettingsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, guildSettings.FindProperty("Id")!, guildSettingsTableMapping);
            RelationalModel.CreateColumnMapping(eventChannelIdColumn, guildSettings.FindProperty("EventChannelId")!, guildSettingsTableMapping);
            RelationalModel.CreateColumnMapping(eventOrganizerRoleIdColumn, guildSettings.FindProperty("EventOrganizerRoleId")!, guildSettingsTableMapping);
            RelationalModel.CreateColumnMapping(eventParticipantRoleIdColumn, guildSettings.FindProperty("EventParticipantRoleId")!, guildSettingsTableMapping);
            RelationalModel.CreateColumnMapping(lootChannelIdColumn, guildSettings.FindProperty("LootChannelId")!, guildSettingsTableMapping);
            var pK_GuildSettings = new UniqueConstraint("PK_GuildSettings", guildSettingsTable, new[] { idColumn1 });
            guildSettingsTable.PrimaryKey = pK_GuildSettings;
            pK_GuildSettings.SetRowKeyValueFactory(new SimpleRowKeyValueFactory<decimal>(pK_GuildSettings));
            var pK_GuildSettingsKey = RelationalModel.GetKey(this,
                "LootGoblin.Bot.Data.Entities.GuildSettings",
                new[] { "Id" });
            pK_GuildSettings.MappedKeys.Add(pK_GuildSettingsKey);
            RelationalModel.GetOrCreateUniqueConstraints(pK_GuildSettingsKey).Add(pK_GuildSettings);
            guildSettingsTable.UniqueConstraints.Add("PK_GuildSettings", pK_GuildSettings);

            var lootPile = FindEntityType("LootGoblin.Bot.Data.Entities.LootPile")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            lootPile.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var lootGoblinBotDataEntitiesLootPileTableBase = new TableBase("LootGoblin.Bot.Data.Entities.LootPile", null, relationalModel);
            var completedAtColumnBase0 = new ColumnBase<ColumnMappingBase>("CompletedAt", "datetimeoffset", lootGoblinBotDataEntitiesLootPileTableBase)
            {
                IsNullable = true
            };
            lootGoblinBotDataEntitiesLootPileTableBase.Columns.Add("CompletedAt", completedAtColumnBase0);
            var completedByColumnBase0 = new ColumnBase<ColumnMappingBase>("CompletedBy", "decimal(20,0)", lootGoblinBotDataEntitiesLootPileTableBase)
            {
                IsNullable = true
            };
            lootGoblinBotDataEntitiesLootPileTableBase.Columns.Add("CompletedBy", completedByColumnBase0);
            var createdAtColumnBase0 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetimeoffset", lootGoblinBotDataEntitiesLootPileTableBase);
            lootGoblinBotDataEntitiesLootPileTableBase.Columns.Add("CreatedAt", createdAtColumnBase0);
            var createdByColumnBase0 = new ColumnBase<ColumnMappingBase>("CreatedBy", "decimal(20,0)", lootGoblinBotDataEntitiesLootPileTableBase);
            lootGoblinBotDataEntitiesLootPileTableBase.Columns.Add("CreatedBy", createdByColumnBase0);
            var currentStatusColumnBase = new ColumnBase<ColumnMappingBase>("CurrentStatus", "tinyint", lootGoblinBotDataEntitiesLootPileTableBase);
            lootGoblinBotDataEntitiesLootPileTableBase.Columns.Add("CurrentStatus", currentStatusColumnBase);
            var descriptionColumnBase0 = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(2048)", lootGoblinBotDataEntitiesLootPileTableBase)
            {
                IsNullable = true
            };
            lootGoblinBotDataEntitiesLootPileTableBase.Columns.Add("Description", descriptionColumnBase0);
            var eventIdColumnBase0 = new ColumnBase<ColumnMappingBase>("EventId", "int", lootGoblinBotDataEntitiesLootPileTableBase);
            lootGoblinBotDataEntitiesLootPileTableBase.Columns.Add("EventId", eventIdColumnBase0);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "int", lootGoblinBotDataEntitiesLootPileTableBase);
            lootGoblinBotDataEntitiesLootPileTableBase.Columns.Add("Id", idColumnBase2);
            var lootTypeColumnBase = new ColumnBase<ColumnMappingBase>("LootType", "tinyint", lootGoblinBotDataEntitiesLootPileTableBase);
            lootGoblinBotDataEntitiesLootPileTableBase.Columns.Add("LootType", lootTypeColumnBase);
            var messageIdColumnBase0 = new ColumnBase<ColumnMappingBase>("MessageId", "decimal(20,0)", lootGoblinBotDataEntitiesLootPileTableBase)
            {
                IsNullable = true
            };
            lootGoblinBotDataEntitiesLootPileTableBase.Columns.Add("MessageId", messageIdColumnBase0);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(256)", lootGoblinBotDataEntitiesLootPileTableBase);
            lootGoblinBotDataEntitiesLootPileTableBase.Columns.Add("Name", nameColumnBase0);
            var originChannelIdColumnBase0 = new ColumnBase<ColumnMappingBase>("OriginChannelId", "decimal(20,0)", lootGoblinBotDataEntitiesLootPileTableBase)
            {
                IsNullable = true
            };
            lootGoblinBotDataEntitiesLootPileTableBase.Columns.Add("OriginChannelId", originChannelIdColumnBase0);
            var rollTypeColumnBase = new ColumnBase<ColumnMappingBase>("RollType", "tinyint", lootGoblinBotDataEntitiesLootPileTableBase);
            lootGoblinBotDataEntitiesLootPileTableBase.Columns.Add("RollType", rollTypeColumnBase);
            relationalModel.DefaultTables.Add("LootGoblin.Bot.Data.Entities.LootPile", lootGoblinBotDataEntitiesLootPileTableBase);
            var lootGoblinBotDataEntitiesLootPileMappingBase = new TableMappingBase<ColumnMappingBase>(lootPile, lootGoblinBotDataEntitiesLootPileTableBase, null);
            lootGoblinBotDataEntitiesLootPileTableBase.AddTypeMapping(lootGoblinBotDataEntitiesLootPileMappingBase, false);
            defaultTableMappings3.Add(lootGoblinBotDataEntitiesLootPileMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, lootPile.FindProperty("Id")!, lootGoblinBotDataEntitiesLootPileMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)completedAtColumnBase0, lootPile.FindProperty("CompletedAt")!, lootGoblinBotDataEntitiesLootPileMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)completedByColumnBase0, lootPile.FindProperty("CompletedBy")!, lootGoblinBotDataEntitiesLootPileMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase0, lootPile.FindProperty("CreatedAt")!, lootGoblinBotDataEntitiesLootPileMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase0, lootPile.FindProperty("CreatedBy")!, lootGoblinBotDataEntitiesLootPileMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)currentStatusColumnBase, lootPile.FindProperty("CurrentStatus")!, lootGoblinBotDataEntitiesLootPileMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase0, lootPile.FindProperty("Description")!, lootGoblinBotDataEntitiesLootPileMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)eventIdColumnBase0, lootPile.FindProperty("EventId")!, lootGoblinBotDataEntitiesLootPileMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lootTypeColumnBase, lootPile.FindProperty("LootType")!, lootGoblinBotDataEntitiesLootPileMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)messageIdColumnBase0, lootPile.FindProperty("MessageId")!, lootGoblinBotDataEntitiesLootPileMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, lootPile.FindProperty("Name")!, lootGoblinBotDataEntitiesLootPileMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)originChannelIdColumnBase0, lootPile.FindProperty("OriginChannelId")!, lootGoblinBotDataEntitiesLootPileMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)rollTypeColumnBase, lootPile.FindProperty("RollType")!, lootGoblinBotDataEntitiesLootPileMappingBase);

            var tableMappings3 = new List<TableMapping>();
            lootPile.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var lootPilesTable = new Table("LootPiles", null, relationalModel);
            var idColumn2 = new Column("Id", "int", lootPilesTable);
            lootPilesTable.Columns.Add("Id", idColumn2);
            idColumn2.Accessors = ColumnAccessorsFactory.CreateGeneric<int>(idColumn2);
            var completedAtColumn0 = new Column("CompletedAt", "datetimeoffset", lootPilesTable)
            {
                IsNullable = true
            };
            lootPilesTable.Columns.Add("CompletedAt", completedAtColumn0);
            completedAtColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<DateTimeOffset>(completedAtColumn0);
            var completedByColumn0 = new Column("CompletedBy", "decimal(20,0)", lootPilesTable)
            {
                IsNullable = true
            };
            lootPilesTable.Columns.Add("CompletedBy", completedByColumn0);
            completedByColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<decimal>(completedByColumn0);
            var createdAtColumn0 = new Column("CreatedAt", "datetimeoffset", lootPilesTable);
            lootPilesTable.Columns.Add("CreatedAt", createdAtColumn0);
            createdAtColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<DateTimeOffset>(createdAtColumn0);
            var createdByColumn0 = new Column("CreatedBy", "decimal(20,0)", lootPilesTable);
            lootPilesTable.Columns.Add("CreatedBy", createdByColumn0);
            createdByColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<decimal>(createdByColumn0);
            var currentStatusColumn = new Column("CurrentStatus", "tinyint", lootPilesTable);
            lootPilesTable.Columns.Add("CurrentStatus", currentStatusColumn);
            currentStatusColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<byte>(currentStatusColumn);
            var descriptionColumn0 = new Column("Description", "nvarchar(2048)", lootPilesTable)
            {
                IsNullable = true
            };
            lootPilesTable.Columns.Add("Description", descriptionColumn0);
            descriptionColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(descriptionColumn0);
            var eventIdColumn0 = new Column("EventId", "int", lootPilesTable);
            lootPilesTable.Columns.Add("EventId", eventIdColumn0);
            eventIdColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<int>(eventIdColumn0);
            var lootTypeColumn = new Column("LootType", "tinyint", lootPilesTable);
            lootPilesTable.Columns.Add("LootType", lootTypeColumn);
            lootTypeColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<byte>(lootTypeColumn);
            var messageIdColumn0 = new Column("MessageId", "decimal(20,0)", lootPilesTable)
            {
                IsNullable = true
            };
            lootPilesTable.Columns.Add("MessageId", messageIdColumn0);
            messageIdColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<decimal>(messageIdColumn0);
            var nameColumn0 = new Column("Name", "nvarchar(256)", lootPilesTable);
            lootPilesTable.Columns.Add("Name", nameColumn0);
            nameColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(nameColumn0);
            var originChannelIdColumn0 = new Column("OriginChannelId", "decimal(20,0)", lootPilesTable)
            {
                IsNullable = true
            };
            lootPilesTable.Columns.Add("OriginChannelId", originChannelIdColumn0);
            originChannelIdColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<decimal>(originChannelIdColumn0);
            var rollTypeColumn = new Column("RollType", "tinyint", lootPilesTable);
            lootPilesTable.Columns.Add("RollType", rollTypeColumn);
            rollTypeColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<byte>(rollTypeColumn);
            relationalModel.Tables.Add(("LootPiles", null), lootPilesTable);
            var lootPilesTableMapping = new TableMapping(lootPile, lootPilesTable, null);
            lootPilesTable.AddTypeMapping(lootPilesTableMapping, false);
            tableMappings3.Add(lootPilesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, lootPile.FindProperty("Id")!, lootPilesTableMapping);
            RelationalModel.CreateColumnMapping(completedAtColumn0, lootPile.FindProperty("CompletedAt")!, lootPilesTableMapping);
            RelationalModel.CreateColumnMapping(completedByColumn0, lootPile.FindProperty("CompletedBy")!, lootPilesTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn0, lootPile.FindProperty("CreatedAt")!, lootPilesTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn0, lootPile.FindProperty("CreatedBy")!, lootPilesTableMapping);
            RelationalModel.CreateColumnMapping(currentStatusColumn, lootPile.FindProperty("CurrentStatus")!, lootPilesTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn0, lootPile.FindProperty("Description")!, lootPilesTableMapping);
            RelationalModel.CreateColumnMapping(eventIdColumn0, lootPile.FindProperty("EventId")!, lootPilesTableMapping);
            RelationalModel.CreateColumnMapping(lootTypeColumn, lootPile.FindProperty("LootType")!, lootPilesTableMapping);
            RelationalModel.CreateColumnMapping(messageIdColumn0, lootPile.FindProperty("MessageId")!, lootPilesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, lootPile.FindProperty("Name")!, lootPilesTableMapping);
            RelationalModel.CreateColumnMapping(originChannelIdColumn0, lootPile.FindProperty("OriginChannelId")!, lootPilesTableMapping);
            RelationalModel.CreateColumnMapping(rollTypeColumn, lootPile.FindProperty("RollType")!, lootPilesTableMapping);
            var pK_LootPiles = new UniqueConstraint("PK_LootPiles", lootPilesTable, new[] { idColumn2 });
            lootPilesTable.PrimaryKey = pK_LootPiles;
            pK_LootPiles.SetRowKeyValueFactory(new SimpleRowKeyValueFactory<int>(pK_LootPiles));
            var pK_LootPilesKey = RelationalModel.GetKey(this,
                "LootGoblin.Bot.Data.Entities.LootPile",
                new[] { "Id" });
            pK_LootPiles.MappedKeys.Add(pK_LootPilesKey);
            RelationalModel.GetOrCreateUniqueConstraints(pK_LootPilesKey).Add(pK_LootPiles);
            lootPilesTable.UniqueConstraints.Add("PK_LootPiles", pK_LootPiles);
            var iX_LootPiles_EventId = new TableIndex(
            "IX_LootPiles_EventId", lootPilesTable, new[] { eventIdColumn0 }, false);
            iX_LootPiles_EventId.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<int>(iX_LootPiles_EventId));
            var iX_LootPiles_EventIdIx = RelationalModel.GetIndex(this,
                "LootGoblin.Bot.Data.Entities.LootPile",
                new[] { "EventId" });
            iX_LootPiles_EventId.MappedIndexes.Add(iX_LootPiles_EventIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_LootPiles_EventIdIx).Add(iX_LootPiles_EventId);
            lootPilesTable.Indexes.Add("IX_LootPiles_EventId", iX_LootPiles_EventId);

            var participantSession = FindEntityType("LootGoblin.Bot.Data.Entities.ParticipantSession")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            participantSession.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var lootGoblinBotDataEntitiesParticipantSessionTableBase = new TableBase("LootGoblin.Bot.Data.Entities.ParticipantSession", null, relationalModel);
            var channelIdColumnBase = new ColumnBase<ColumnMappingBase>("ChannelId", "decimal(20,0)", lootGoblinBotDataEntitiesParticipantSessionTableBase);
            lootGoblinBotDataEntitiesParticipantSessionTableBase.Columns.Add("ChannelId", channelIdColumnBase);
            var endedAtColumnBase = new ColumnBase<ColumnMappingBase>("EndedAt", "datetimeoffset", lootGoblinBotDataEntitiesParticipantSessionTableBase)
            {
                IsNullable = true
            };
            lootGoblinBotDataEntitiesParticipantSessionTableBase.Columns.Add("EndedAt", endedAtColumnBase);
            var eventIdColumnBase1 = new ColumnBase<ColumnMappingBase>("EventId", "int", lootGoblinBotDataEntitiesParticipantSessionTableBase);
            lootGoblinBotDataEntitiesParticipantSessionTableBase.Columns.Add("EventId", eventIdColumnBase1);
            var eventParticipantIdColumnBase = new ColumnBase<ColumnMappingBase>("EventParticipantId", "int", lootGoblinBotDataEntitiesParticipantSessionTableBase)
            {
                IsNullable = true
            };
            lootGoblinBotDataEntitiesParticipantSessionTableBase.Columns.Add("EventParticipantId", eventParticipantIdColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "int", lootGoblinBotDataEntitiesParticipantSessionTableBase);
            lootGoblinBotDataEntitiesParticipantSessionTableBase.Columns.Add("Id", idColumnBase3);
            var startedAtColumnBase0 = new ColumnBase<ColumnMappingBase>("StartedAt", "datetimeoffset", lootGoblinBotDataEntitiesParticipantSessionTableBase);
            lootGoblinBotDataEntitiesParticipantSessionTableBase.Columns.Add("StartedAt", startedAtColumnBase0);
            var userIdColumnBase0 = new ColumnBase<ColumnMappingBase>("UserId", "decimal(20,0)", lootGoblinBotDataEntitiesParticipantSessionTableBase);
            lootGoblinBotDataEntitiesParticipantSessionTableBase.Columns.Add("UserId", userIdColumnBase0);
            relationalModel.DefaultTables.Add("LootGoblin.Bot.Data.Entities.ParticipantSession", lootGoblinBotDataEntitiesParticipantSessionTableBase);
            var lootGoblinBotDataEntitiesParticipantSessionMappingBase = new TableMappingBase<ColumnMappingBase>(participantSession, lootGoblinBotDataEntitiesParticipantSessionTableBase, null);
            lootGoblinBotDataEntitiesParticipantSessionTableBase.AddTypeMapping(lootGoblinBotDataEntitiesParticipantSessionMappingBase, false);
            defaultTableMappings4.Add(lootGoblinBotDataEntitiesParticipantSessionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, participantSession.FindProperty("Id")!, lootGoblinBotDataEntitiesParticipantSessionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)channelIdColumnBase, participantSession.FindProperty("ChannelId")!, lootGoblinBotDataEntitiesParticipantSessionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)endedAtColumnBase, participantSession.FindProperty("EndedAt")!, lootGoblinBotDataEntitiesParticipantSessionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)eventIdColumnBase1, participantSession.FindProperty("EventId")!, lootGoblinBotDataEntitiesParticipantSessionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)eventParticipantIdColumnBase, participantSession.FindProperty("EventParticipantId")!, lootGoblinBotDataEntitiesParticipantSessionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)startedAtColumnBase0, participantSession.FindProperty("StartedAt")!, lootGoblinBotDataEntitiesParticipantSessionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase0, participantSession.FindProperty("UserId")!, lootGoblinBotDataEntitiesParticipantSessionMappingBase);

            var tableMappings4 = new List<TableMapping>();
            participantSession.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var participantSessionsTable = new Table("ParticipantSessions", null, relationalModel);
            var idColumn3 = new Column("Id", "int", participantSessionsTable);
            participantSessionsTable.Columns.Add("Id", idColumn3);
            idColumn3.Accessors = ColumnAccessorsFactory.CreateGeneric<int>(idColumn3);
            var channelIdColumn = new Column("ChannelId", "decimal(20,0)", participantSessionsTable);
            participantSessionsTable.Columns.Add("ChannelId", channelIdColumn);
            channelIdColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<decimal>(channelIdColumn);
            var endedAtColumn = new Column("EndedAt", "datetimeoffset", participantSessionsTable)
            {
                IsNullable = true
            };
            participantSessionsTable.Columns.Add("EndedAt", endedAtColumn);
            endedAtColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<DateTimeOffset>(endedAtColumn);
            var eventIdColumn1 = new Column("EventId", "int", participantSessionsTable);
            participantSessionsTable.Columns.Add("EventId", eventIdColumn1);
            eventIdColumn1.Accessors = ColumnAccessorsFactory.CreateGeneric<int>(eventIdColumn1);
            var eventParticipantIdColumn = new Column("EventParticipantId", "int", participantSessionsTable)
            {
                IsNullable = true
            };
            participantSessionsTable.Columns.Add("EventParticipantId", eventParticipantIdColumn);
            eventParticipantIdColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<int>(eventParticipantIdColumn);
            var startedAtColumn0 = new Column("StartedAt", "datetimeoffset", participantSessionsTable);
            participantSessionsTable.Columns.Add("StartedAt", startedAtColumn0);
            startedAtColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<DateTimeOffset>(startedAtColumn0);
            var userIdColumn0 = new Column("UserId", "decimal(20,0)", participantSessionsTable);
            participantSessionsTable.Columns.Add("UserId", userIdColumn0);
            userIdColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<decimal>(userIdColumn0);
            relationalModel.Tables.Add(("ParticipantSessions", null), participantSessionsTable);
            var participantSessionsTableMapping = new TableMapping(participantSession, participantSessionsTable, null);
            participantSessionsTable.AddTypeMapping(participantSessionsTableMapping, false);
            tableMappings4.Add(participantSessionsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, participantSession.FindProperty("Id")!, participantSessionsTableMapping);
            RelationalModel.CreateColumnMapping(channelIdColumn, participantSession.FindProperty("ChannelId")!, participantSessionsTableMapping);
            RelationalModel.CreateColumnMapping(endedAtColumn, participantSession.FindProperty("EndedAt")!, participantSessionsTableMapping);
            RelationalModel.CreateColumnMapping(eventIdColumn1, participantSession.FindProperty("EventId")!, participantSessionsTableMapping);
            RelationalModel.CreateColumnMapping(eventParticipantIdColumn, participantSession.FindProperty("EventParticipantId")!, participantSessionsTableMapping);
            RelationalModel.CreateColumnMapping(startedAtColumn0, participantSession.FindProperty("StartedAt")!, participantSessionsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn0, participantSession.FindProperty("UserId")!, participantSessionsTableMapping);
            var pK_ParticipantSessions = new UniqueConstraint("PK_ParticipantSessions", participantSessionsTable, new[] { idColumn3 });
            participantSessionsTable.PrimaryKey = pK_ParticipantSessions;
            pK_ParticipantSessions.SetRowKeyValueFactory(new SimpleRowKeyValueFactory<int>(pK_ParticipantSessions));
            var pK_ParticipantSessionsKey = RelationalModel.GetKey(this,
                "LootGoblin.Bot.Data.Entities.ParticipantSession",
                new[] { "Id" });
            pK_ParticipantSessions.MappedKeys.Add(pK_ParticipantSessionsKey);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ParticipantSessionsKey).Add(pK_ParticipantSessions);
            participantSessionsTable.UniqueConstraints.Add("PK_ParticipantSessions", pK_ParticipantSessions);
            var iX_ParticipantSessions_EventId = new TableIndex(
            "IX_ParticipantSessions_EventId", participantSessionsTable, new[] { eventIdColumn1 }, false);
            iX_ParticipantSessions_EventId.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<int>(iX_ParticipantSessions_EventId));
            var iX_ParticipantSessions_EventIdIx = RelationalModel.GetIndex(this,
                "LootGoblin.Bot.Data.Entities.ParticipantSession",
                new[] { "EventId" });
            iX_ParticipantSessions_EventId.MappedIndexes.Add(iX_ParticipantSessions_EventIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ParticipantSessions_EventIdIx).Add(iX_ParticipantSessions_EventId);
            participantSessionsTable.Indexes.Add("IX_ParticipantSessions_EventId", iX_ParticipantSessions_EventId);
            var fK_EventParticipants_GuildEvents_EventId = new ForeignKeyConstraint(
                "FK_EventParticipants_GuildEvents_EventId", eventParticipantsTable, guildEventsTable,
                new[] { eventIdColumn },
                guildEventsTable.FindUniqueConstraint("PK_GuildEvents")!, ReferentialAction.Cascade);
            fK_EventParticipants_GuildEvents_EventId.SetRowForeignKeyValueFactory(RowForeignKeyValueFactoryFactory.CreateSimpleNonNullableFactory<int, int>(fK_EventParticipants_GuildEvents_EventId));
            var fK_EventParticipants_GuildEvents_EventIdFk = RelationalModel.GetForeignKey(this,
                "LootGoblin.Bot.Data.Entities.EventParticipant",
                new[] { "EventId" },
                "LootGoblin.Bot.Data.Entities.GuildEvent",
                new[] { "Id" });
            fK_EventParticipants_GuildEvents_EventId.MappedForeignKeys.Add(fK_EventParticipants_GuildEvents_EventIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_EventParticipants_GuildEvents_EventIdFk).Add(fK_EventParticipants_GuildEvents_EventId);
            eventParticipantsTable.ForeignKeyConstraints.Add(fK_EventParticipants_GuildEvents_EventId);
            guildEventsTable.ReferencingForeignKeyConstraints.Add(fK_EventParticipants_GuildEvents_EventId);
            var fK_LootPiles_GuildEvents_EventId = new ForeignKeyConstraint(
                "FK_LootPiles_GuildEvents_EventId", lootPilesTable, guildEventsTable,
                new[] { eventIdColumn0 },
                guildEventsTable.FindUniqueConstraint("PK_GuildEvents")!, ReferentialAction.Cascade);
            fK_LootPiles_GuildEvents_EventId.SetRowForeignKeyValueFactory(RowForeignKeyValueFactoryFactory.CreateSimpleNonNullableFactory<int, int>(fK_LootPiles_GuildEvents_EventId));
            var fK_LootPiles_GuildEvents_EventIdFk = RelationalModel.GetForeignKey(this,
                "LootGoblin.Bot.Data.Entities.LootPile",
                new[] { "EventId" },
                "LootGoblin.Bot.Data.Entities.GuildEvent",
                new[] { "Id" });
            fK_LootPiles_GuildEvents_EventId.MappedForeignKeys.Add(fK_LootPiles_GuildEvents_EventIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_LootPiles_GuildEvents_EventIdFk).Add(fK_LootPiles_GuildEvents_EventId);
            lootPilesTable.ForeignKeyConstraints.Add(fK_LootPiles_GuildEvents_EventId);
            guildEventsTable.ReferencingForeignKeyConstraints.Add(fK_LootPiles_GuildEvents_EventId);
            var fK_ParticipantSessions_GuildEvents_EventId = new ForeignKeyConstraint(
                "FK_ParticipantSessions_GuildEvents_EventId", participantSessionsTable, guildEventsTable,
                new[] { eventIdColumn1 },
                guildEventsTable.FindUniqueConstraint("PK_GuildEvents")!, ReferentialAction.Cascade);
            fK_ParticipantSessions_GuildEvents_EventId.SetRowForeignKeyValueFactory(RowForeignKeyValueFactoryFactory.CreateSimpleNonNullableFactory<int, int>(fK_ParticipantSessions_GuildEvents_EventId));
            var fK_ParticipantSessions_GuildEvents_EventIdFk = RelationalModel.GetForeignKey(this,
                "LootGoblin.Bot.Data.Entities.ParticipantSession",
                new[] { "EventId" },
                "LootGoblin.Bot.Data.Entities.GuildEvent",
                new[] { "Id" });
            fK_ParticipantSessions_GuildEvents_EventId.MappedForeignKeys.Add(fK_ParticipantSessions_GuildEvents_EventIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ParticipantSessions_GuildEvents_EventIdFk).Add(fK_ParticipantSessions_GuildEvents_EventId);
            participantSessionsTable.ForeignKeyConstraints.Add(fK_ParticipantSessions_GuildEvents_EventId);
            guildEventsTable.ReferencingForeignKeyConstraints.Add(fK_ParticipantSessions_GuildEvents_EventId);
            return relationalModel.MakeReadOnly();
        }
    }
}
