// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using LootGoblin.Bot.Data.Entities;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#pragma warning disable 219, 612, 618
#nullable disable

namespace LootGoblin.Bot.Data.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class GuildSettingsEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "LootGoblin.Bot.Data.Entities.GuildSettings",
                typeof(GuildSettings),
                baseEntityType,
                propertyCount: 5,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(ulong),
                propertyInfo: typeof(GuildSettings).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GuildSettings).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.SetGetter(
                ulong (GuildSettings entity) => GuildSettingsUnsafeAccessors.Id(entity),
                bool (GuildSettings entity) => GuildSettingsUnsafeAccessors.Id(entity) == 0UL,
                ulong (GuildSettings instance) => GuildSettingsUnsafeAccessors.Id(instance),
                bool (GuildSettings instance) => GuildSettingsUnsafeAccessors.Id(instance) == 0UL);
            id.SetSetter(
                (GuildSettings entity, ulong value) => GuildSettingsUnsafeAccessors.Id(entity) = value);
            id.SetMaterializationSetter(
                (GuildSettings entity, ulong value) => GuildSettingsUnsafeAccessors.Id(entity) = value);
            id.SetAccessors(
                ulong (InternalEntityEntry entry) => GuildSettingsUnsafeAccessors.Id(((GuildSettings)(entry.Entity))),
                ulong (InternalEntityEntry entry) => GuildSettingsUnsafeAccessors.Id(((GuildSettings)(entry.Entity))),
                ulong (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(id, 0),
                ulong (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<ulong>(id, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: -1);
            id.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<decimal>(
                    bool (decimal v1, decimal v2) => v1 == v2,
                    int (decimal v) => ((object)v).GetHashCode(),
                    decimal (decimal v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "decimal(20,0)",
                    precision: 20,
                    scale: 0),
                converter: new ValueConverter<ulong, decimal>(
                    decimal (ulong v) => ((decimal)(v)),
                    ulong (decimal v) => ((ulong)(v))),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ulong, decimal>(
                    JsonDecimalReaderWriter.Instance,
                    new ValueConverter<ulong, decimal>(
                        decimal (ulong v) => ((decimal)(v)),
                        ulong (decimal v) => ((ulong)(v)))));
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<ulong>(id));
            id.SetSentinelFromProviderValue(0m);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var eventChannelId = runtimeEntityType.AddProperty(
                "EventChannelId",
                typeof(ulong?),
                propertyInfo: typeof(GuildSettings).GetProperty("EventChannelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GuildSettings).GetField("<EventChannelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            eventChannelId.SetGetter(
                ulong? (GuildSettings entity) => GuildSettingsUnsafeAccessors.EventChannelId(entity),
                bool (GuildSettings entity) => !(GuildSettingsUnsafeAccessors.EventChannelId(entity).HasValue),
                ulong? (GuildSettings instance) => GuildSettingsUnsafeAccessors.EventChannelId(instance),
                bool (GuildSettings instance) => !(GuildSettingsUnsafeAccessors.EventChannelId(instance).HasValue));
            eventChannelId.SetSetter(
                (GuildSettings entity, ulong? value) => GuildSettingsUnsafeAccessors.EventChannelId(entity) = value);
            eventChannelId.SetMaterializationSetter(
                (GuildSettings entity, ulong? value) => GuildSettingsUnsafeAccessors.EventChannelId(entity) = value);
            eventChannelId.SetAccessors(
                ulong? (InternalEntityEntry entry) => GuildSettingsUnsafeAccessors.EventChannelId(((GuildSettings)(entry.Entity))),
                ulong? (InternalEntityEntry entry) => GuildSettingsUnsafeAccessors.EventChannelId(((GuildSettings)(entry.Entity))),
                ulong? (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong?>(eventChannelId, 1),
                ulong? (InternalEntityEntry entry) => entry.GetCurrentValue<ulong?>(eventChannelId),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            eventChannelId.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            eventChannelId.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<decimal>(
                    bool (decimal v1, decimal v2) => v1 == v2,
                    int (decimal v) => ((object)v).GetHashCode(),
                    decimal (decimal v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "decimal(20,0)",
                    precision: 20,
                    scale: 0),
                converter: new ValueConverter<ulong, decimal>(
                    decimal (ulong v) => ((decimal)(v)),
                    ulong (decimal v) => ((ulong)(v))),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ulong, decimal>(
                    JsonDecimalReaderWriter.Instance,
                    new ValueConverter<ulong, decimal>(
                        decimal (ulong v) => ((decimal)(v)),
                        ulong (decimal v) => ((ulong)(v)))));
            eventChannelId.SetComparer(new NullableValueComparer<ulong>(eventChannelId.TypeMapping.Comparer));
            eventChannelId.SetKeyComparer(new NullableValueComparer<ulong>(eventChannelId.TypeMapping.KeyComparer));
            eventChannelId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var eventOrganizerRoleId = runtimeEntityType.AddProperty(
                "EventOrganizerRoleId",
                typeof(ulong?),
                propertyInfo: typeof(GuildSettings).GetProperty("EventOrganizerRoleId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GuildSettings).GetField("<EventOrganizerRoleId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            eventOrganizerRoleId.SetGetter(
                ulong? (GuildSettings entity) => GuildSettingsUnsafeAccessors.EventOrganizerRoleId(entity),
                bool (GuildSettings entity) => !(GuildSettingsUnsafeAccessors.EventOrganizerRoleId(entity).HasValue),
                ulong? (GuildSettings instance) => GuildSettingsUnsafeAccessors.EventOrganizerRoleId(instance),
                bool (GuildSettings instance) => !(GuildSettingsUnsafeAccessors.EventOrganizerRoleId(instance).HasValue));
            eventOrganizerRoleId.SetSetter(
                (GuildSettings entity, ulong? value) => GuildSettingsUnsafeAccessors.EventOrganizerRoleId(entity) = value);
            eventOrganizerRoleId.SetMaterializationSetter(
                (GuildSettings entity, ulong? value) => GuildSettingsUnsafeAccessors.EventOrganizerRoleId(entity) = value);
            eventOrganizerRoleId.SetAccessors(
                ulong? (InternalEntityEntry entry) => GuildSettingsUnsafeAccessors.EventOrganizerRoleId(((GuildSettings)(entry.Entity))),
                ulong? (InternalEntityEntry entry) => GuildSettingsUnsafeAccessors.EventOrganizerRoleId(((GuildSettings)(entry.Entity))),
                ulong? (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong?>(eventOrganizerRoleId, 2),
                ulong? (InternalEntityEntry entry) => entry.GetCurrentValue<ulong?>(eventOrganizerRoleId),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            eventOrganizerRoleId.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            eventOrganizerRoleId.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<decimal>(
                    bool (decimal v1, decimal v2) => v1 == v2,
                    int (decimal v) => ((object)v).GetHashCode(),
                    decimal (decimal v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "decimal(20,0)",
                    precision: 20,
                    scale: 0),
                converter: new ValueConverter<ulong, decimal>(
                    decimal (ulong v) => ((decimal)(v)),
                    ulong (decimal v) => ((ulong)(v))),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ulong, decimal>(
                    JsonDecimalReaderWriter.Instance,
                    new ValueConverter<ulong, decimal>(
                        decimal (ulong v) => ((decimal)(v)),
                        ulong (decimal v) => ((ulong)(v)))));
            eventOrganizerRoleId.SetComparer(new NullableValueComparer<ulong>(eventOrganizerRoleId.TypeMapping.Comparer));
            eventOrganizerRoleId.SetKeyComparer(new NullableValueComparer<ulong>(eventOrganizerRoleId.TypeMapping.KeyComparer));
            eventOrganizerRoleId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var eventParticipantRoleId = runtimeEntityType.AddProperty(
                "EventParticipantRoleId",
                typeof(ulong?),
                propertyInfo: typeof(GuildSettings).GetProperty("EventParticipantRoleId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GuildSettings).GetField("<EventParticipantRoleId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            eventParticipantRoleId.SetGetter(
                ulong? (GuildSettings entity) => GuildSettingsUnsafeAccessors.EventParticipantRoleId(entity),
                bool (GuildSettings entity) => !(GuildSettingsUnsafeAccessors.EventParticipantRoleId(entity).HasValue),
                ulong? (GuildSettings instance) => GuildSettingsUnsafeAccessors.EventParticipantRoleId(instance),
                bool (GuildSettings instance) => !(GuildSettingsUnsafeAccessors.EventParticipantRoleId(instance).HasValue));
            eventParticipantRoleId.SetSetter(
                (GuildSettings entity, ulong? value) => GuildSettingsUnsafeAccessors.EventParticipantRoleId(entity) = value);
            eventParticipantRoleId.SetMaterializationSetter(
                (GuildSettings entity, ulong? value) => GuildSettingsUnsafeAccessors.EventParticipantRoleId(entity) = value);
            eventParticipantRoleId.SetAccessors(
                ulong? (InternalEntityEntry entry) => GuildSettingsUnsafeAccessors.EventParticipantRoleId(((GuildSettings)(entry.Entity))),
                ulong? (InternalEntityEntry entry) => GuildSettingsUnsafeAccessors.EventParticipantRoleId(((GuildSettings)(entry.Entity))),
                ulong? (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong?>(eventParticipantRoleId, 3),
                ulong? (InternalEntityEntry entry) => entry.GetCurrentValue<ulong?>(eventParticipantRoleId),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            eventParticipantRoleId.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            eventParticipantRoleId.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<decimal>(
                    bool (decimal v1, decimal v2) => v1 == v2,
                    int (decimal v) => ((object)v).GetHashCode(),
                    decimal (decimal v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "decimal(20,0)",
                    precision: 20,
                    scale: 0),
                converter: new ValueConverter<ulong, decimal>(
                    decimal (ulong v) => ((decimal)(v)),
                    ulong (decimal v) => ((ulong)(v))),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ulong, decimal>(
                    JsonDecimalReaderWriter.Instance,
                    new ValueConverter<ulong, decimal>(
                        decimal (ulong v) => ((decimal)(v)),
                        ulong (decimal v) => ((ulong)(v)))));
            eventParticipantRoleId.SetComparer(new NullableValueComparer<ulong>(eventParticipantRoleId.TypeMapping.Comparer));
            eventParticipantRoleId.SetKeyComparer(new NullableValueComparer<ulong>(eventParticipantRoleId.TypeMapping.KeyComparer));
            eventParticipantRoleId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lootChannelId = runtimeEntityType.AddProperty(
                "LootChannelId",
                typeof(ulong?),
                propertyInfo: typeof(GuildSettings).GetProperty("LootChannelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GuildSettings).GetField("<LootChannelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            lootChannelId.SetGetter(
                ulong? (GuildSettings entity) => GuildSettingsUnsafeAccessors.LootChannelId(entity),
                bool (GuildSettings entity) => !(GuildSettingsUnsafeAccessors.LootChannelId(entity).HasValue),
                ulong? (GuildSettings instance) => GuildSettingsUnsafeAccessors.LootChannelId(instance),
                bool (GuildSettings instance) => !(GuildSettingsUnsafeAccessors.LootChannelId(instance).HasValue));
            lootChannelId.SetSetter(
                (GuildSettings entity, ulong? value) => GuildSettingsUnsafeAccessors.LootChannelId(entity) = value);
            lootChannelId.SetMaterializationSetter(
                (GuildSettings entity, ulong? value) => GuildSettingsUnsafeAccessors.LootChannelId(entity) = value);
            lootChannelId.SetAccessors(
                ulong? (InternalEntityEntry entry) => GuildSettingsUnsafeAccessors.LootChannelId(((GuildSettings)(entry.Entity))),
                ulong? (InternalEntityEntry entry) => GuildSettingsUnsafeAccessors.LootChannelId(((GuildSettings)(entry.Entity))),
                ulong? (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong?>(lootChannelId, 4),
                ulong? (InternalEntityEntry entry) => entry.GetCurrentValue<ulong?>(lootChannelId),
                object (ValueBuffer valueBuffer) => valueBuffer[4]);
            lootChannelId.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            lootChannelId.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    bool (ulong v1, ulong v2) => v1 == v2,
                    int (ulong v) => ((object)v).GetHashCode(),
                    ulong (ulong v) => v),
                providerValueComparer: new ValueComparer<decimal>(
                    bool (decimal v1, decimal v2) => v1 == v2,
                    int (decimal v) => ((object)v).GetHashCode(),
                    decimal (decimal v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "decimal(20,0)",
                    precision: 20,
                    scale: 0),
                converter: new ValueConverter<ulong, decimal>(
                    decimal (ulong v) => ((decimal)(v)),
                    ulong (decimal v) => ((ulong)(v))),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ulong, decimal>(
                    JsonDecimalReaderWriter.Instance,
                    new ValueConverter<ulong, decimal>(
                        decimal (ulong v) => ((decimal)(v)),
                        ulong (decimal v) => ((ulong)(v)))));
            lootChannelId.SetComparer(new NullableValueComparer<ulong>(lootChannelId.TypeMapping.Comparer));
            lootChannelId.SetKeyComparer(new NullableValueComparer<ulong>(lootChannelId.TypeMapping.KeyComparer));
            lootChannelId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id");
            var eventChannelId = runtimeEntityType.FindProperty("EventChannelId");
            var eventOrganizerRoleId = runtimeEntityType.FindProperty("EventOrganizerRoleId");
            var eventParticipantRoleId = runtimeEntityType.FindProperty("EventParticipantRoleId");
            var lootChannelId = runtimeEntityType.FindProperty("LootChannelId");
            var key = runtimeEntityType.FindKey(new[] { id });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNonNullableFactory<ulong>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<ulong>(key));
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((GuildSettings)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong, ulong?, ulong?, ulong?, ulong?>(((ValueComparer<ulong>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong>(id)), (source.GetCurrentValue<ulong?>(eventChannelId) == null ? null : ((ValueComparer<ulong?>)(((IProperty)eventChannelId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong?>(eventChannelId))), (source.GetCurrentValue<ulong?>(eventOrganizerRoleId) == null ? null : ((ValueComparer<ulong?>)(((IProperty)eventOrganizerRoleId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong?>(eventOrganizerRoleId))), (source.GetCurrentValue<ulong?>(eventParticipantRoleId) == null ? null : ((ValueComparer<ulong?>)(((IProperty)eventParticipantRoleId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong?>(eventParticipantRoleId))), (source.GetCurrentValue<ulong?>(lootChannelId) == null ? null : ((ValueComparer<ulong?>)(((IProperty)lootChannelId).GetValueComparer())).Snapshot(source.GetCurrentValue<ulong?>(lootChannelId))))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => Snapshot.Empty);
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((GuildSettings)(source.Entity));
                    return ((ISnapshot)(new Snapshot<ulong>(((ValueComparer<ulong>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<ulong>(id)))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 5,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 5,
                shadowCount: 0,
                relationshipCount: 1,
                storeGeneratedCount: 0);
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "GuildSettings");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
